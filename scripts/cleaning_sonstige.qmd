---
title: "Aufbereiten Sonstiger"
format: html
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(arrow)
library(duckdb)
library(sf)
```

# BBSR Raumgliederung

[Quelle](https://www.bbsr.bund.de/BBSR/DE/forschung/raumbeobachtung/downloads/download-referenzen.html)

Laden der Daten vom BBSR. Ich verwende nicht alle Variablen, sondern vier, die ich für sinvoll halte:
- Degree of Urbanisation (`dgurb`) von [Eurostat](https://ec.europa.eu/eurostat/web/degree-of-urbanisation/methodology) mit 3 Leveln.
- Raumtyp mit Bezug auf die Lage der Gemeinden (`raumtyp_lage`) mit 4 Leveln.
- Stadt- und Gemeindetyp (`gemeindetyp`) mit 5 Leveln.
- Stadt- und Gemeindetyp differenziert (`gemeindetyp_differenziert`) mit 7 Leveln.

Außerdem behalte ich den Amtlichen Gemeindeschlüssel sowie den Regionalschlüssel zum Matchen mit anderen Datensätzen. Der Gemeindename (`gem_name`) dient zur Plausibilisierung.

```{r}
gemeinden_bbsr <- readxl::read_xlsx("./data/raw/Raumgliederung_BBSR/raumgliederungen-referenzen-2022.xlsx",
                               sheet = "Gemeindereferenz (inkl. Kreise)",
                               skip = 1,
                               col_types = "text") %>%
  janitor::clean_names() %>%
  select(gem_name = gemeinden_2022_name,
         gem_kennziffer = gemeinden_2022_kennziffer,
         gem_regionalschlussel = gemeinden_2022_regionalschlussel,
         dgurb_kennziffer = degree_of_urbanisation_gemeinden_2022_kennziffer,
         dgurb_name = degree_of_urbanisation_gemeinden_2022_name,
         raumtyp_lage_kennziffer = raumtyp_bezug_lage_gemeinden_2022_kennziffer,
         raumtyp_lage_name = raumtyp_bezug_lage_gemeinden_2022_name,
         gemeindetyp_kennziffer = stadt_und_gemeindetyp_2022_kennziffer,
         gemeindetyp_name = stadt_und_gemeindetyp_2022_name,
         gemeindetyp_differenziert_kennziffer = stadt_und_gemeindetyp_differenziert_2022_kennziffer,
         gemeindetyp_differenziert_name = stadt_und_gemeindetyp_differenziert_2022_name) %>%
  mutate(gem_kennziffer = str_pad(gem_kennziffer, 8, side = "left", pad = "0"),
         gem_regionalschlussel = str_pad(gem_regionalschlussel, 12, side = "left", pad = "0")) %>%
  mutate(dgurb_name = fct_reorder(dgurb_name, as.numeric(dgurb_kennziffer)),
         raumtyp_lage_name = fct_reorder(raumtyp_lage_name, as.numeric(raumtyp_lage_kennziffer)),
         gemeindetyp_name = fct_reorder(gemeindetyp_name, as.numeric(gemeindetyp_kennziffer)),
         gemeindetyp_differenziert_name = fct_reorder(gemeindetyp_differenziert_name, as.numeric(gemeindetyp_differenziert_kennziffer)))

gemeinden_bbsr %>%
  write_parquet("./data/processed/Raumgliederung_BBSR/gemeinden_bbsr.parquet")
```

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

gemeinden <- st_read("./data/raw/Geodaten/DE_VG250.gpkg", layer = "v_vg250_gem", as_tibble = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  filter(geofaktor_gf == "mit Struktur Land") %>%
  select(ars = regionalschlussel_ars, ags = gemeindeschlussel_ags, name = geografischer_name_gen, bezeichnung, einwohner = einwohnerzahl_ewz, flaeche = katasterflache_kfl)
```

Mit einem Geospatial Join verbinde ich die Grid-Zellen mit der jeweiligen Gemeinde in der sie liegen (ausgehend vom Mittelpunkt der Zelle). Dann joine ich die BBSR Daten.

Manche Zellen liegen in keiner Gemeinde. Nach visueller Inspektion liegen vielen diese Zellen mit ihrem Mittelpunkt nicht in Deutschland oder es handelt sich um gemeindefreie Gebiete. Da auch die Anzahl gering ist, wird dies als hinnehmbare Ungenauigkeit angesehen.

```{r}
cells_gemeinden_bbsr <- st_join(all_distinct_cells, gemeinden) %>%
  st_drop_geometry() %>%
  left_join(gemeinden_bbsr, by = join_by(ags == gem_kennziffer)) %>%
  drop_na() %>%
  select(x_mp, y_mp, ags, gem_name, dgurb_kennziffer:last_col())

cells_gemeinden_bbsr %>%
  count(gem_name) %>%
  arrange(desc(n))

cells_gemeinden_bbsr %>%
  filter(is.na(gem_name))

cells_gemeinden_bbsr %>%
  write_parquet("./data/processed/Raumgliederung_BBSR/Raster_1km_gemeinden_bbsr.parquet")
```

# Einkommen

Ich verwende Zahlen zum verfügbaren Einkommen auf Kreisebene. Stärker disaggregierte Zahlen konnte ich nicht finden. [Quelle](https://www.statistikportal.de/de/vgrdl/ergebnisse-kreisebene/einkommen-kreise)

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

kreise <- st_read("./data/raw/Geodaten/DE_VG250.gpkg", layer = "v_vg250_krs", as_tibble = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  filter(geofaktor_gf == "mit Struktur Land") %>%
  select(ars = regionalschlussel_ars, ags = gemeindeschlussel_ags, name = geografischer_name_gen, bezeichnung, einwohner = einwohnerzahl_ewz, flaeche = katasterflache_kfl)

kreise_einkommen <- readxl::read_xlsx("./data/raw/Sonstige/vgrdl_r2b3_bs2023.xlsx", sheet = "2.4", skip = 4) %>%
  janitor::clean_names() %>%
  drop_na(lfd_nr) %>%
  filter(nuts_3 == 3) %>%
  mutate(name = str_extract(gebietseinheit, "^[^,\\n]+"), .before = 1) %>%
  mutate(regional_schlussel = str_pad(regional_schlussel, width = 5, side = "right", pad = "0")) %>%
  mutate(einkommen_delta = x2022 / x2012) %>%
  select(ars = regional_schlussel, einkommen = x2022, einkommen_delta) %>%
  left_join(kreise, by = "ars") %>%
  st_as_sf()

cells_kreise_einkommen <- st_join(all_distinct_cells, kreise_einkommen) %>%
  st_drop_geometry() %>%
  drop_na() %>%
  select(x_mp, y_mp, ars, name, einkommen, einkommen_delta)

cells_kreise_einkommen %>%
  write_parquet("./data/processed/Geodaten/Raster_1km_kreise_einkommen.parquet")
```

# PLZ Gebiete

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

plz <- st_read("./data/raw/Geodaten/PLZ_Gebiete_9143106783908117499.gpkg",
                    as_tibble = TRUE, quiet = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  select(plz)

cells_plz <- st_join(all_distinct_cells, plz) %>%
  st_drop_geometry() %>%
  drop_na()

cells_plz %>%
  write_parquet("./data/processed/Geodaten/Raster_1km_plz.parquet")
```

# Zensus Gebäudetyp

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

gemeinden <- st_read("./data/raw/Geodaten/DE_VG250.gpkg", layer = "v_vg250_gem", as_tibble = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  filter(geofaktor_gf == "mit Struktur Land") %>%
  select(ars = regionalschlussel_ars, ags = gemeindeschlussel_ags, name = geografischer_name_gen, bezeichnung, einwohner = einwohnerzahl_ewz, flaeche = katasterflache_kfl)

zensus_gebäudetyp <- readxl::read_xlsx("./data/raw/Zensus/Regionaltabelle_Gebaeude_Wohnungen.xlsx", 
                          sheet = "CSV-Gebäude", col_types = "text") %>%
  janitor::clean_names() %>%
  filter(regionalebene == "Gemeinde") %>%
  select(ars = rs, name, gebäude_ges = gebaeudeart_sys_1, efh = gebtypbauweise_1, dhh = gebtypbauweise_2) %>%
  mutate(across(gebäude_ges:dhh, as.numeric),
         across(gebäude_ges:dhh, ~replace_na(.x, 0))) %>%
  mutate(anteil_efh = (efh + dhh) / gebäude_ges) %>%
  mutate(anteil_efh = pmin(anteil_efh, 1))

zensus_gebäudetyp %>%
  write_parquet("./data/processed/Zensus/zensus_gebäudetypen.parquet")

gemeinden_gebäudetypen <- zensus_gebäudetyp %>%
  select(-name) %>%
  left_join(gemeinden, by = "ars") %>%
  st_as_sf()

cells_gemeinden_gebäudetypen <- st_join(all_distinct_cells, gemeinden_gebäudetypen) %>%
  st_drop_geometry() %>%
  drop_na() %>%
  select(x_mp, y_mp, ars, name, anteil_efh)

cells_gemeinden_gebäudetypen %>%
  write_parquet("./data/processed/Geodaten/Raster_1km_gemeinden_gebäudetypen.parquet")
```

# Raster und PLZ

Zum Bereinigen der Immo-Datensatzes werden fehlende PLZ basierend auf der Rasterzelle ersetzt

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

plz <- st_read("./data/raw/Geodaten/PLZ_Gebiete_9143106783908117499.gpkg",
                    as_tibble = TRUE, quiet = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  select(plz)

cells_plz <- st_join(all_distinct_cells, plz) %>%
  st_drop_geometry() %>%
  drop_na() %>%
  select(x_mp, y_mp, plz)

cells_plz %>%
  write_parquet("./data/processed/Geodaten/Raster_1km_plz.parquet")
```

# Raster und Bundesländer

```{r}
all_distinct_cells <- st_read("./data/raw/Geodaten/DE_Grid_ETRS89-LAEA_1km.gpkg",
                              query = "SELECT x_mp, y_mp FROM de_grid_laea_1km",
                              as_tibble = TRUE, quiet = TRUE) %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035, remove = FALSE)

bundesländer <- st_read("./data/raw/Geodaten/DE_VG250.gpkg", layer = "v_vg250_lan", as_tibble = TRUE) %>%
  st_transform(3035) %>%
  janitor::clean_names() %>%
  filter(geofaktor_gf == "mit Struktur Land") %>%
  select(name = geografischer_name_gen) %>%
  mutate(is_osten = name %in% c("Berlin", "Brandenburg", "Mecklenburg-Vorpommern", "Sachsen", "Sachsen-Anhalt", "Thüringen"))

cells_bundesländer <- st_join(all_distinct_cells, bundesländer) %>%
  st_drop_geometry() %>%
  drop_na() %>%
  select(x_mp, y_mp, name, is_osten)

cells_bundesländer %>%
  write_parquet("./data/processed/Geodaten/Raster_1km_bundesländer.parquet")
```
