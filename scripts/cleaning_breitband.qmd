---
title: "Aufbereiten Breitbandatlas"
format: html
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(arrow)
library(duckdb)
library(sf)
```

# Breitbandatlas Aggregieren

Die Daten des Breitbandatlas sind auf dem 100m Raster gegeben, für die Auswertungen in Verbindung mit den Sozio- bzw. Immodaten benötige ich aber das 1km Raster. Hier führe ich die Aggregation durch.

Für die Aggregation der Breitband Daten verwende ich später einen gewichteten Mittelwert mit der Anzahl der Haushalte als Gewicht. Dafür lade ich hier die Zensus Daten und berechne die Anzahl der Haushalte für jedes 100m Quadrat. Da öfter die `durchschn_hh_groesse` fehlt, verwende ich das mice Package um die Werte zu imputieren.

Um im nächsten Schritt alles im Arrow-Framework bearbeiten zu können, wandle ich die Zensus-Daten nach der Imputation wieder in einen Arrow-Table (diesmal in-memory) um.

```{r}
zensus_arrow <- open_dataset("./data/processed/Zensus/Gesamt/")

zensus_haushalte_100m_arrow <- zensus_arrow %>%
  filter(typ == "100m") %>%
  select(x_mp, y_mp, insgesamt_bevoelkerung, durchschn_hh_groesse) %>%
  mutate(has_na = is.na(insgesamt_bevoelkerung) | is.na(durchschn_hh_groesse)) %>%
  mutate(anzahl_haushalte = insgesamt_bevoelkerung / durchschn_hh_groesse) %>%
  collect() %>%
  mice::mice(m = 1, maxit = 1, pred = mice::quickpred(., exclude = c("x_mp", "y_mp", "has_na")), seed = 1) %>%
  mice::complete() %>%
  as_tibble() %>%
  select(x_mp, y_mp, anzahl_haushalte) %>%
  arrow_table()
```

Jetzt wird aggregiert. Zuerst werden noch die präparierten Haushalts-Zahlen aus dem Zensus gejoint. Das geht, weil sowohl die Breitband als auch die Haushaltsdaten im Arrow-Format vorliegen. Die `weighted.mean()` Funktion ist in Arrow nicht implementiert, daher verwende ich die primitivere Version. Durch fehlende Werte oder nullen entstehen `NaN`s, die ich im nächsten Schritt in "normale" `NA`s umwandle.

```{r}
breitband_100m_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_100m/")

breitband_100m_arrow %>%
  left_join(
    zensus_haushalte_100m_arrow, by = c("x_mp", "y_mp")
  ) %>%
  filter(!is.na(anzahl_haushalte)) %>%
  mutate(
    x_mp_1km = floor(x_mp/1000)*1000 + 500,
    y_mp_1km = floor(y_mp/1000)*1000 + 500
  ) %>%
  group_by(date, x_mp_1km, y_mp_1km) %>%
  summarise(
    across(
      starts_with("down_"),
      ~ sum(.x * anzahl_haushalte, na.rm = TRUE) / sum(anzahl_haushalte, na.rm = TRUE)
    ),
    .groups = "drop"
  ) %>%
  mutate(across(
    starts_with("down_"),
    ~ if_else(is.nan(.x), NA_real_, .x)
  )) %>%
  select(date, x_mp = x_mp_1km, y_mp = y_mp_1km, everything()) %>%
  group_by(date) %>%
  write_dataset("./data/processed/Breitbandatlas/Raster_1km/")
```

Hier noch ein Vergleich der 100m Daten vs den aggregierten 1km Daten anhand Berlin.

```{r}
breitband_100m_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_100m/")
breitband_1km_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_1km/")

breitband_100m_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(date == 202312) %>%
  filter(x_mp %>% between(4531081, 4576579),
         y_mp %>% between(3254012, 3290626)) %>%
  collect() %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035) %>%
  st_buffer(dist = 50, endCapStyle = "SQUARE") %>%
  ggplot()+
  geom_sf(aes(fill = down_fn_hh_ftthb_1000), color = NA)+
  scale_fill_viridis_c()+
  theme_void()+
  theme(legend.position = "none")

ggsave("./output/plots/plot_berlin_100m.pdf", width = 3, height = 2.5)

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(date == 202312) %>%
  filter(x_mp %>% between(4531081, 4576579),
         y_mp %>% between(3254012, 3290626)) %>%
  collect() %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035) %>%
  st_buffer(dist = 500, endCapStyle = "SQUARE") %>%
  ggplot()+
  geom_sf(aes(fill = down_fn_hh_ftthb_1000), color = NA)+
  scale_fill_viridis_c()+
  theme_void()+
  theme(legend.position = "none")

ggsave("./output/plots/plot_berlin_1km.pdf", width = 3, height = 2.5)
```

# Maximale Geschwindigkeit

Ich extrahiere für jede Zelle und Jahr die maximal verfügbare Internetgeschwindigkeit. Dabei unterscheide ich nach Glasfaser (`_fiber`), nicht-Glasfaser (`_no_fiber`) und dem Maximum aus beidem (`_all`).

```{r}
breitband_1km_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_1km/")

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, contains("ftthb"), contains("hfc"), contains("fttc") ,contains("sonst")) %>%
  collect() %>%
  pivot_longer(cols = starts_with("down"), names_to = "speed_name", values_to = "anteil") %>%
  filter(anteil > 50) %>%
  mutate(type = case_when(
    speed_name %>% str_detect("(hfc|fttc|sonst)") ~ "no_fiber",
    speed_name %>% str_detect("ftthb") ~ "fiber",
    TRUE ~ NA
    )) %>%
  drop_na(type) %>%
  mutate(speed = speed_name %>% str_extract("\\d+$") %>% as.numeric()) %>%
  group_by(date, x_mp, y_mp, type) %>%
  summarise(max_speed = max(speed), .groups = "drop") %>%
  pivot_wider(names_from = type, values_from = max_speed, names_prefix = "max_speed_") %>%
  mutate(max_speed_all = pmax(max_speed_fiber, max_speed_no_fiber, na.rm = TRUE)) %>%
  write_parquet("./data/processed/Breitbandatlas/Raster_1km_max_speed.parquet")
```

# Gitterzellen, bei denen Glasfaser verschwindet

In manchen Gitterzellen verschwindet plötzlich das Glasfaser. Dabei handelt es sich wahrscheinlich um Meldefehler, entweder beim (nicht erfolgten) Ausbau, oder das "Verschwinden" ist nicht korrekt. Ich erstelle einen neuen Dataframe mit den Koordinaten und Datum dieser Zellen (`x_mp`, `y_mp`, `date`). Diese können dann später mit `anti_join()` einfach entfernt werden.

Konkret werden zuerst alle verschiedenen Zeitpunkte in einem Dataframe `distinct_dates` gesammelt. Danach wird `disappeared_fiber` erstellt, ein Dataframe, das die Koordinaten sowie den Zeitpunkt enthält, an dem Glasfaser "verschwindet". Durch einen `left_join()` der `distinct_dates` auf diesen wird das kartesische Produkt aus dem Zeitpunkt des Verschwindens und aller möglichen Zeitpunkte erstellt. Anschließend werden je Zelle nur die Zeitpunkte behalten, die kleiner sind als der Zeitpunkt des Verschwindens.

```{r}
breitband_1km_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_1km/")

distinct_dates <- breitband_1km_arrow %>%
  distinct(date) %>%
  arrange(date) %>%
  collect()

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(!is.na(down_fn_hh_ftthb_1000)) %>%
  to_duckdb() %>%
  #arrange(x_mp, y_mp, date) %>%
  mutate(has_fiber = if_else(down_fn_hh_ftthb_1000 > 50, 1, 0)) %>%
  group_by(x_mp, y_mp) %>%
  mutate(got_fiber = has_fiber - lag(has_fiber)) %>%
  ungroup() %>%
  filter(got_fiber == -1) %>%
  distinct(date, x_mp, y_mp) %>%
  collect() %>%
  cross_join(distinct_dates) %>%
  filter(date.y < date.x) %>%
  select(date = date.y, x_mp, y_mp) %>%
  arrange(x_mp, y_mp, date) %>%
  write_parquet("./data/processed/Breitbandatlas/Raster_1km_problems.parquet")
```

# Zeitpunkt, bei dem erstmals Glasfaser vorhanden ist

Hier verwende ich jetzt auch den `breitband_problems` Datensatz

```{r}
breitband_problems <- read_parquet("./data/processed/Breitbandatlas/Raster_1km_problems.parquet")

breitband_1km_arrow <- open_dataset("./data/processed/Breitbandatlas/Raster_1km/")

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(!is.na(down_fn_hh_ftthb_1000)) %>%
  arrange(x_mp, y_mp, date) %>%
  mutate(has_fiber = if_else(down_fn_hh_ftthb_1000 > 50, 1, 0)) %>%
  collect() %>%
  anti_join(breitband_problems, by = join_by(date, x_mp, y_mp)) %>%
  group_by(x_mp, y_mp) %>%
  mutate(got_fiber = has_fiber - lag(has_fiber)) %>%
  ungroup() %>%
  filter(got_fiber == 1) %>%
  select(x_mp, y_mp, got_fiber_date = date) %>%
  group_by(x_mp, y_mp) %>%
  slice_min(order_by = got_fiber_date) %>%
  ungroup() %>%
  write_parquet("./data/processed/Breitbandatlas/Raster_1km_got_fiber_date.parquet")
```
