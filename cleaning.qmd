---
title: "cleaning.qmd"
format: html
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(arrow)
library(duckdb)
library(sf)
```

# Zensus Daten

Ich lese hier die Daten vom Zensus auf allen drei Rasterebenen (10km, 1km, 100m) ein und benenne die Koordinaten einheitlich. Danach füge ich eine neue Variable hinzu, welche die Rasterebene anzeigt. Anschließend werden die Daten in einem Arrow Dataset gespeichert und können so wesentlich schneller eingelesen werden.

```{r}
# Altersverteilung -----------------------------
alter_10km <- read_csv2("./Daten/Zensus/Alter_in_10er-Jahresgruppen/Zensus2022_Alter_in_10er-Jahresgruppen_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km) %>%
  mutate(across(unter10:a80undaelter, as.numeric))

alter_1km <- read_csv2("./Daten/Zensus/Alter_in_10er-Jahresgruppen/Zensus2022_Alter_in_10er-Jahresgruppen_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km) %>%
  mutate(across(unter10:a80undaelter, as.numeric))

alter_100m <- read_csv2("./Daten/Zensus/Alter_in_10er-Jahresgruppen/Zensus2022_Alter_in_10er-Jahresgruppen_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m) %>%
  mutate(across(unter10:a80undaelter, as.numeric))

# Durchschnittsalter -----------------------------
durchschnittsalter_10km <- read_csv2("./Daten/Zensus/Durchschnittsalter_in_Gitterzellen/Zensus2022_Durchschnittsalter_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km)

durchschnittsalter_1km <- read_csv2("./Daten/Zensus/Durchschnittsalter_in_Gitterzellen/Zensus2022_Durchschnittsalter_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km)

durchschnittsalter_100m <- read_csv2("./Daten/Zensus/Durchschnittsalter_in_Gitterzellen/Zensus2022_Durchschnittsalter_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m)

# Gebäude Baujahre -----------------------------
gebäude_10km <- read_csv2("./Daten/Zensus/Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen/Zensus2022_Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km) %>%
  mutate(across(insgesamt_gebaeude:a2020undspaeter, as.numeric))

gebäude_1km <- read_csv2("./Daten/Zensus/Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen/Zensus2022_Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km) %>%
  mutate(across(insgesamt_gebaeude:a2020undspaeter, as.numeric))

gebäude_100m <- read_csv2("./Daten/Zensus/Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen/Zensus2022_Gebaeude_nach_Baujahr_in_Mikrozensus_Klassen_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m) %>%
  mutate(across(insgesamt_gebaeude:a2020undspaeter, as.numeric))

# Einwohner -----------------------------
einwohner_10km <- read_csv2("./Daten/Zensus/Zensus2022_Bevoelkerungszahl/Zensus2022_Bevoelkerungszahl_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km)

einwohner_1km <- read_csv2("./Daten/Zensus/Zensus2022_Bevoelkerungszahl/Zensus2022_Bevoelkerungszahl_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km)

einwohner_100m <- read_csv2("./Daten/Zensus/Zensus2022_Bevoelkerungszahl/Zensus2022_Bevoelkerungszahl_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m)

# Haushaltsgröße -----------------------------
haushaltsgröße_10km <- read_csv2("./Daten/Zensus/Durchschnittliche_Haushaltsgroesse_in_Gitterzellen/Zensus2022_Durchschn_Haushaltsgroesse_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km)

haushaltsgröße_1km <- read_csv2("./Daten/Zensus/Durchschnittliche_Haushaltsgroesse_in_Gitterzellen/Zensus2022_Durchschn_Haushaltsgroesse_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km)

haushaltsgröße_100m <- read_csv2("./Daten/Zensus/Durchschnittliche_Haushaltsgroesse_in_Gitterzellen/Zensus2022_Durchschn_Haushaltsgroesse_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m)

# Wohnfläche -----------------------------
wohnfläche_10km <- read_csv2("./Daten/Zensus/Durchschnittliche_Wohnflaeche_je_Bewohner_in_Gitterzellen/Zensus2022_Durchschn_Flaeche_je_Bewohner_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km)

wohnfläche_1km <- read_csv2("./Daten/Zensus/Durchschnittliche_Wohnflaeche_je_Bewohner_in_Gitterzellen/Zensus2022_Durchschn_Flaeche_je_Bewohner_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km)

wohnfläche_100m <- read_csv2("./Daten/Zensus/Durchschnittliche_Wohnflaeche_je_Bewohner_in_Gitterzellen/Zensus2022_Durchschn_Flaeche_je_Bewohner_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m)

# Eigentümerquote -----------------------------
eigentümerquote_10km <- read_csv2("./Daten/Zensus/Eigentuemerquote_in_Gitterzellen/Zensus2022_Eigentuemerquote_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km) %>%
  mutate(eigentuemerquote = parse_number(eigentuemerquote, locale = locale(decimal_mark = ",")))

eigentümerquote_1km <- read_csv2("./Daten/Zensus/Eigentuemerquote_in_Gitterzellen/Zensus2022_Eigentuemerquote_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km) %>%
  mutate(eigentuemerquote = parse_number(eigentuemerquote, locale = locale(decimal_mark = ",")))

eigentümerquote_100m <- read_csv2("./Daten/Zensus/Eigentuemerquote_in_Gitterzellen/Zensus2022_Eigentuemerquote_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m) %>%
  mutate(eigentuemerquote = parse_number(eigentuemerquote, locale = locale(decimal_mark = ",")))

# Leerstand -----------------------------
leerstand_10km <- read_csv2("./Daten/Zensus/Leerstandsquote_in_Gitterzellen/Zensus2022_Leerstandsquote_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km) %>%
  mutate(leerstandsquote = parse_number(leerstandsquote, locale = locale(decimal_mark = ",")))

leerstand_1km <- read_csv2("./Daten/Zensus/Leerstandsquote_in_Gitterzellen/Zensus2022_Leerstandsquote_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km) %>%
  mutate(leerstandsquote = parse_number(leerstandsquote, locale = locale(decimal_mark = ",")))

leerstand_100m <- read_csv2("./Daten/Zensus/Leerstandsquote_in_Gitterzellen/Zensus2022_Leerstandsquote_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m) %>%
  mutate(leerstandsquote = parse_number(leerstandsquote, locale = locale(decimal_mark = ",")))

# Miete -----------------------------
nettokaltmiete_10km <- read_csv2("./Daten/Zensus/Zensus2022_Durchschn_Nettokaltmiete/Zensus2022_Durchschn_Nettokaltmiete_10km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_10km,
         x_mp = x_mp_10km,
         y_mp = y_mp_10km)

nettokaltmiete_1km <- read_csv2("./Daten/Zensus/Zensus2022_Durchschn_Nettokaltmiete/Zensus2022_Durchschn_Nettokaltmiete_1km-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_1km,
         x_mp = x_mp_1km,
         y_mp = y_mp_1km)

nettokaltmiete_100m <- read_csv2("./Daten/Zensus/Zensus2022_Durchschn_Nettokaltmiete/Zensus2022_Durchschn_Nettokaltmiete_100m-Gitter.csv") %>%
  janitor::clean_names() %>%
  select(-werterlaeuternde_zeichen) %>%
  rename(gitter_id = gitter_id_100m,
         x_mp = x_mp_100m,
         y_mp = y_mp_100m)
```

Alle Daten verbinden und neue Variable `typ` hinzufügen.

```{r}
zensus_df_list <- list(
  list(alter_10km, alter_1km, alter_100m),
  list(durchschnittsalter_10km, durchschnittsalter_1km, durchschnittsalter_100m),
  list(gebäude_10km, gebäude_1km, gebäude_100m),
  list(einwohner_10km, einwohner_1km, einwohner_100m),
  list(haushaltsgröße_10km, haushaltsgröße_1km, haushaltsgröße_100m),
  list(wohnfläche_10km, wohnfläche_1km, wohnfläche_100m),
  list(eigentümerquote_10km, eigentümerquote_1km, eigentümerquote_100m),
  list(leerstand_10km, leerstand_1km, leerstand_100m),
  list(nettokaltmiete_10km, nettokaltmiete_1km, nettokaltmiete_100m)
)

zensus_final <- zensus_df_list %>%
  map(\(x) {
    x %>%
      map(\(y) {
        y %>%
          mutate(typ = str_extract(gitter_id, "RES(.+)N", group = 1) %>% 
                 case_match("10000m" ~ "10km", "1000m" ~ "1km", "100m" ~ "100m"),
                 .before = 1) %>%
          select(-gitter_id)
      }) %>%
      list_rbind()
  }) %>%
  reduce(full_join, by = c("typ", "x_mp", "y_mp"))
```

Schreiben als Arrow Dataset

```{r}
zensus_final %>%
  group_by(typ) %>%
  write_dataset("./Daten/Zensus/Gesamt/")
```

# Breitbandatlas Aggregieren

Die Daten des Breitbandatlas sind auf dem 100m Raster gegeben, für die Auswertungen in Verbindung mit den Sozio- bzw. Immodaten benötige ich aber das 1km Raster. Hier führe ich die Aggregation durch.

Für die Aggregation der Breitband Daten verwende ich später einen gewichteten Mittelwert mit der Anzahl der Haushalte als Gewicht. Dafür lade ich hier die Zensus Daten und berechne die Anzahl der Haushalte für jedes 100m Quadrat.

```{r}
zensus_arrow <- open_dataset("./Daten/Zensus/Gesamt/")

zensus_haushalte_100m <- zensus_arrow %>%
  filter(typ == "100m") %>%
  mutate(anzahl_haushalte = insgesamt_bevoelkerung / durchschn_hh_groesse) %>%
  select(x_mp, y_mp, anzahl_haushalte) %>%
  collect()
```

Jetzt loope ich über alle Zeitpunkte und Variablen. Das ist nötig, weil die Operation sonst zu viel RAM benötigt. Ich lade die Daten des jeweiligen Zeitpunktes und Variable und joine die Anzahl der Haushalte. Ich entferne alle Beobachtungen, bei denen entweder die Anzahl der Haushalte oder der Wert der jeweiligen Variable fehlt. Anschließend wird alles im Long Format in einen Arrow Datensatz geschrieben. Im nächsten Schritt werde ich diesen dann ins Wide Format überführen, dafür müssen aber erst alle Variablen eines Jahres aggregiert worden sein.

```{r}
breitband_100m_arrow <- open_dataset("./Daten/Breitbandatlas/Raster_100m/")

arrow_dates <- breitband_100m_arrow %>% 
  distinct(date) %>%
  arrange(date) %>%
  collect() %>%
  pull(date)

arrow_variables <- breitband_100m_arrow %>%
  filter(date == 202312) %>%
  slice_sample(n = 1) %>%
  collect() %>%
  select(starts_with("down_")) %>%
  colnames()

total <- length(arrow_dates) * length(arrow_variables)
counter <- 1

for(d in arrow_dates) {

  gc()

  for(v in arrow_variables) {
    if(counter %% 10 == 0) str_glue("{counter} of {total}") %>% print()

    breitband_100m_arrow %>%
      filter(date == d) %>%
      select(date, x_mp, y_mp, !!sym(v)) %>%
      collect() %>%
      left_join(zensus_haushalte_100m, by = join_by(x_mp, y_mp)) %>%
      mutate(x_mp_1km = floor(x_mp/1000)*1000 + 500,
             y_mp_1km = floor(y_mp/1000)*1000 + 500) %>%
      drop_na(anzahl_haushalte) %>%
      group_by(date, x_mp_1km, y_mp_1km) %>%
      summarise(!!v := weighted.mean(!!sym(v), anzahl_haushalte), .groups = "drop") %>%
      rename(x_mp = x_mp_1km, y_mp = y_mp_1km) %>%
      pivot_longer(cols = all_of(v)) %>%
      mutate(value = round(value, 2)) %>%
      group_by(date, name) %>%
      write_dataset("./Daten/Breitbandatlas/Raster_1km_long/")

    counter <- counter + 1
  }
}
```

Und jetzt wieder zusammenfügen im Wide Format.

```{r}
breitband_1km_long_arrow <- open_dataset("./Daten/Breitbandatlas/Raster_1km_long/")

arrow_names_sorted <- breitband_1km_long_arrow %>%
  distinct(name) %>%
  collect() %>%
  pull(name) %>%
  gtools::mixedsort()

for(d in arrow_dates) {
  print(d)

  breitband_1km_long_arrow %>%
    filter(date == d) %>%
    collect() %>%
    pivot_wider(names_from = name, values_from = value) %>%
    select(date, x_mp, y_mp, all_of(arrow_names_sorted)) %>%
    group_by(date) %>%
    write_dataset("./Daten/Breitbandatlas/Raster_1km/")
}
```

Hier noch ein Vergleich der 100m Daten vs den aggregierten 1km Daten anhand Berlin.

```{r}
breitband_100m_arrow <- open_dataset("./Daten/Breitbandatlas/Raster_100m/")
breitband_1km_arrow <- open_dataset("./Daten/Breitbandatlas/Raster_1km/")

breitband_100m_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(date == 202312) %>%
  filter(x_mp %>% between(4531081, 4576579),
         y_mp %>% between(3254012, 3290626)) %>%
  collect() %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035) %>%
  st_buffer(dist = 50, endCapStyle = "SQUARE") %>%
  ggplot()+
  geom_sf(aes(fill = down_fn_hh_ftthb_1000), color = NA)+
  scale_fill_viridis_c()

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, down_fn_hh_ftthb_1000) %>%
  filter(date == 202312) %>%
  filter(x_mp %>% between(4531081, 4576579),
         y_mp %>% between(3254012, 3290626)) %>%
  collect() %>%
  st_as_sf(coords = c("x_mp", "y_mp"), crs = 3035) %>%
  st_buffer(dist = 500, endCapStyle = "SQUARE") %>%
  ggplot()+
  geom_sf(aes(fill = down_fn_hh_ftthb_1000), color = NA)+
  scale_fill_viridis_c()
```

# Neue Variable: Maximale Geschwindigkeit

Ich extrahiere für jede Zelle und Jahr die maximal verfügbare Internetgeschwindigkeit. Dabei unterscheide ich nach Glasfaser (`_fiber`), nicht-Glasfaser (`_no_fiber`) und dem Maximum aus beidem (`_all`).

```{r}
breitband_1km_arrow <- open_dataset("./Daten/Breitbandatlas/Raster_1km/")

breitband_1km_arrow %>%
  select(date, x_mp, y_mp, contains("ftt"), contains("hfc"), contains("sonst")) %>%
  collect() %>%
  pivot_longer(cols = starts_with("down"), names_to = "speed_name", values_to = "anteil") %>%
  filter(anteil > 50) %>%
  mutate(type = case_when(
    speed_name %>% str_detect("(hfc|sonst)") ~ "no_fiber",
    speed_name %>% str_detect("ftt") ~ "fiber",
    TRUE ~ NA
    )) %>%
  drop_na(type) %>%
  mutate(speed = speed_name %>% str_extract("\\d+$") %>% as.numeric()) %>%
  group_by(date, x_mp, y_mp, type) %>%
  summarise(max_speed = max(speed), .groups = "drop") %>%
  pivot_wider(names_from = type, values_from = max_speed, names_prefix = "max_speed_") %>%
  mutate(max_speed_all = pmax(max_speed_fiber, max_speed_no_fiber, na.rm = TRUE)) %>%
  write_parquet("./Daten/Breitbandatlas/Raster_1km_max_speed.parquet")
```
