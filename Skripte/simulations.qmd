---
title: "Simulationen"
format: html
---

# Setup

```{r}
library(tidyverse)
library(did)
library(HonestDiD)
source("honest_did_helper.R")
source("helper_functions.R")
```

# CS21 allgemeine Beispiele

Hier ein simulierter Datensatz um ein paar Beispielgrafiken zu machen um das did Package vorzustellen

```{r}
#| fig-width: 2
#| fig-height: 3

dat <- simulate_panel(n_ids = 15, n_time = 10, treatment_percentage = 0.5,
                      treatment_groups = tibble(group = 1:3, 
                                                treatment_time = c(3, 4, 7), 
                                                treatment_multiplier = c(1.5, 2.0, 3),
                                                treatment_jump = c(4, 0, 2)),
                      seed = 1
                      )

dat %>%
  ggplot(aes(x = time, y = y, color = as.factor(first_treat), group = as.factor(id)))+
  geom_vline(xintercept = dat %>% filter(first_treat != 0) %>% pull(first_treat), 
             linetype = "dotted")+
  geom_line(alpha = .8)+
  scale_x_continuous(breaks = seq(0, 10, 2))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(color = "Gruppe",
       x = "Zeit", y = "Zielgröße")
ggsave("../Output/plots/did/plot_did_example_data.pdf", width = 2, height = 3, device = cairo_pdf)
```

```{r}
#| fig-width: 4
#| fig-height: 3

dat_att <- att_gt(
  yname         = "y",
  tname         = "time",
  idname        = "id",
  gname         = "first_treat",
  #xformla       = NULL,            # No additional controls in this dataset 
  control_group = "nevertreated", # Too few groups for "nevertreated" default
  clustervars   = "id", 
  data          = dat,
  )

tidy(dat_att) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_point()+
  geom_linerange()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~group, nrow = 1)+
  scale_color_manual(values = c("#2E8B8B", "#E67E22"))+
  scale_y_continuous(breaks = seq(0, 8, by = 2))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT")
ggsave("../Output/plots/did/plot_did_example_att.pdf", width = 4, height = 3, device = cairo_pdf)
```

```{r}
#| fig-width: 2
#| fig-height: 3

dat_att %>%
  aggte(type = "dynamic") %>%
  tidy() %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  scale_color_manual(values = c("#2E8B8B", "#E67E22"))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT")
ggsave("../Output/plots/did/plot_did_example_agg_dyn.pdf", width = 2, height = 3, device = cairo_pdf)

dat_att %>%
  aggte(type = "group", max_e = 2) %>%
  tidy() %>%
  filter(group != "Average") %>%
  mutate(group = factor(group, levels = as.character(sort(as.numeric(group))))) %>%
  ggplot(aes(x = estimate, y = group, xmin = conf.low, xmax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_vline(aes(xintercept = 0), linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "ATT",
       y = "Gruppe",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_example_agg_group.pdf", width = 2, height = 3, device = cairo_pdf)

dat_att %>%
  aggte(type = "calendar") %>%
  tidy() %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_example_agg_calendar.pdf", width = 2, height = 3, device = cairo_pdf)
```

# p-values in CS21, großer Datensatz

Um rauszufinden, wie sensibel der Wald-Test für die Pretrends und `honestDiD` sind, hier eine Simulation mit einem synthetischen Datensatz.

Was auffällt: Mit vielen Gruppen (Achtung, nicht Gruppen im Sinne von CS21) ist der Wald-Test sehr sensibel. Das heißt, auch winzige Abweichungen bei den Pretrends (z.B. 1% unterschiedliche Steigung) werden erkannt und der p-Wert ist nahe Null.

[Hier](https://chat.maulwurf.fun/share/rny9CO7eNsA-r35oMip_z) eine Erklärung von o1

```{r}
dat <- simulate_panel(n_ids = 100000, n_time = 10, base_slopes = c(1.01,1),
                      treatment_groups = tibble(group = 1, 
                                                treatment_time = 5, 
                                                treatment_multiplier = 2, 
                                                treatment_jump = 0),
                      seed = 1
                      )

cs21 = att_gt(
  yname         = "y",
  tname         = "time",
  idname        = "id",
  gname         = "first_treat",
  control_group = "nevertreated",
  clustervars   = "id", 
  data          = dat,
  base_period   = "universal"
  )
cs21$Wpval

cs21_agg_dyn <- aggte(cs21, type = "dynamic", min_e = -5, max_e = 5)
```

```{r}
#| fig-width: 3
#| fig-height: 3

dat %>%
  filter(id %in% c(1:3, 50000:50002)) %>%
  ggplot(aes(x = time, y = y, color = as.factor(first_treat), group = as.factor(id)))+
  geom_line()+
  scale_x_continuous(breaks = 1:10)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit", y = "Zielgröße", color = element_blank())
ggsave("../Output/plots/did/plot_did_simulation.pdf", width = 3, height = 3, device = cairo_pdf)

cs21_agg_dyn %>% 
  tidy() %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  #coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(-4, 5, 1))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit (relativ)",
       y = "ATT")
ggsave("../Output/plots/did/plot_did_simulation_agg_dyn.pdf", width = 3, height = 3, device = cairo_pdf)
```


```{r}
#| fig-width: 5
#| fig-height: 2.5

# code for running honest_did
# cs21_agg_dyn_honest_smooth <- honest_did(es = cs21_agg_dyn,
#                            e = 1,
#                            type="smoothness")
# cs21_agg_dyn_honest_smooth


cs21_agg_dyn_honest_rel <- honest_did(es = cs21_agg_dyn,
                          e = 1,
                          type="relative_magnitude",
                          Mbarvec = seq(from = 24, to = 26, by = 0.25),
                          #monotonicityDirection = "increasing",
                          method = "Conditional",
                          #gridPoints = 5e3,
                          #grid.ub = 1e2, grid.lb = -1e2
                          )
cs21_agg_dyn_honest_rel
# Drop 0 as that is not really allowed.
#cs21_agg_dyn_honest_rel$robust_ci <- cs21_agg_dyn_honest_rel$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
# createSensitivityPlot(cs21_agg_dyn_honest_smooth$robust_ci,
#                       cs21_agg_dyn_honest_smooth$orig_ci)

createSensitivityPlot_relativeMagnitudes(cs21_agg_dyn_honest_rel$robust_ci,
                                         cs21_agg_dyn_honest_rel$orig_ci,
                                         add_xAxis = FALSE)+
  geom_hline(yintercept = 0, linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(y = "ATT")
ggsave("../Output/plots/did/plot_did_simulation_agg_dyn_honest.pdf", width = 5, height = 2.5, device = cairo_pdf)
```

Beobachtung: HonestDiD kann (bei relative magnitude) nur sinnvolle Ergebnisse geben, wenn die Ergebnisse der dynamic aggregation (bei dem e) auch statistisch signifikante Ergebnisse hat.
Beispiel: Bei einer kleinen Stichprobe (kleines `n_ids`) und einem niedrigen `treatment_multiplier` (nahe 1) und `treatment_jump` (nahe Null) findet `aggte(cs21, type = "dynamic")` keine signifikanten Ergebnisse. Und dann gibt es auch kein interessantes "breakdown" $\bar{M}$. Interessant wird es dann, wenn bei einer relativ kleinen Stichprobe der `treatment_multiplier` oder `treatment_jump` so gewählt werden, dass die Ergebnisse von `aggte()` nur knapp signifikant sind.

# Simulation kleiner Datensatz

```{r}
dat_small <- simulate_panel(n_ids = 100, n_time = 10, base_slopes = c(1.2,1),
                            treatment_percentage = 0.2,
                            treatment_groups = tibble(group = 1, 
                                                      treatment_time = 5, 
                                                      treatment_multiplier = 2, 
                                                      treatment_jump = 0),
                            seed = 1
                            )

cs21_small = att_gt(
  yname         = "y",
  tname         = "time",
  idname        = "id",
  gname         = "first_treat",
  control_group = "nevertreated",
  clustervars   = "id", 
  data          = dat_small,
  base_period   = "universal"
  )
cs21_small$Wpval

cs21_small_agg_dyn <- aggte(cs21_small, type = "dynamic", min_e = -5, max_e = 5)
```

```{r}
#| fig-width: 3
#| fig-height: 3

cs21_small_agg_dyn %>% 
  tidy() %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  #coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(-4, 5, 1))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Zeit relativ ($e$)"),
       y = latex2exp::TeX("$ATT_{dyn}(e)$"))
ggsave("../Output/plots/did/plot_did_simulation_small_agg_dyn.pdf", width = 3, height = 3, device = cairo_pdf)
```

```{r}
#| fig-width: 3
#| fig-height: 3

cs21_small_agg_dyn_honest_rel <- honest_did(es = cs21_small_agg_dyn,
                          e = 1,
                          type="relative_magnitude",
                          Mbarvec = seq(from = 0, to = 2, by = 0.25),
                          #monotonicityDirection = "increasing",
                          method = "Conditional",
                          #gridPoints = 5e3,
                          #grid.ub = 1e2, grid.lb = -1e2
                          )
#cs21_small_agg_dyn_honest_rel

# Drop 0 as that is not really allowed.
cs21_small_agg_dyn_honest_rel$robust_ci <- cs21_small_agg_dyn_honest_rel$robust_ci[-1,]

## -----------------------------------------------------------------------------
createSensitivityPlot_relativeMagnitudes(cs21_small_agg_dyn_honest_rel$robust_ci,
                                         cs21_small_agg_dyn_honest_rel$orig_ci,
                                         add_xAxis = FALSE)+
  geom_hline(yintercept = 0, linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(y = latex2exp::TeX("$ATT_{dyn}(e=1)$"))
ggsave("../Output/plots/did/plot_did_simulation_small_agg_dyn_honest.pdf", width = 3, height = 3, device = cairo_pdf)
```