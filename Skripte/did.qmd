---
title: "did"
format: html
editor_options: 
  chunk_output_type: inline
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(arrow)
library(did)
library(broom)
library(did2s)
library(HonestDiD)
source("honest_did_helper.R")
```

# Import

```{r}
dates_pseudo_halbjahr <- read_parquet("../Daten/dates_pseudo_halbjahr.parquet")

data_miete_complete <- read_parquet("../Daten/RWI_GEO_REX/Daten_Miete/data_miete_complete.parquet")
data_kauf_complete <- read_parquet("../Daten/RWI_GEO_REX/Daten_Kauf/data_kauf_complete.parquet")
```

# Miete

## Bevorzugte Spezifikation

- Keine `fill`ed in Zellen
- Clustering auf Ebene der PLZ
- Controlgroup not-yet-treated
- Erklärende Variable `mode_baujahr`
- ...

```{r}
mod_miete <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete

#ggdid(mod_miete)

tidy(mod_miete) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date, nrow = 2)+
  #scale_x_continuous(breaks = 1:20)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr",
       y = "ATT: Miete (€/m²)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_miete.pdf", width = 5, height = 4, device = cairo_pdf)

mod_miete_agg_dyn <- did::aggte(mod_miete, type = "dynamic")
ggdid(mod_miete_agg_dyn)+
  coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = -6:10)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr: Relativ zum ersten Treatment",
       y = "ATT: Miete (€/m²)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_miete_agg_dyn.pdf", width = 5, height = 4, device = cairo_pdf)
  
mod_miete_agg_group <- did::aggte(mod_miete, type = "group")
ggdid(mod_miete_agg_group)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "ATT: Miete (€/m²)",
       y = "Halbjahr: Erstes Treatments",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_miete_agg_group.pdf", width = 5, height = 4, device = cairo_pdf)

mod_miete_agg_calendar <- did::aggte(mod_miete, type = "calendar")
ggdid(mod_miete_agg_calendar)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr",
       y = "ATT: Miete (€/m²)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_miete_agg_calendar.pdf", width = 5, height = 4, device = cairo_pdf)
```

## ohne PLZ Cluster

```{r}
mod_miete_2 <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete_2

mod_miete_2_agg_dyn <- did::aggte(mod_miete_2, type = "dynamic")
ggdid(mod_miete_2_agg_dyn)
```

Vergleich

```{r}
bind_rows(
  tidy(mod_miete_agg_dyn),
  tidy(mod_miete_2_agg_dyn),
  .id = "id"
) %>%
  select(id, event.time, estimate, conf.low, conf.high) %>%
  #filter(event.time == 2) %>%
  pivot_wider(names_from = id, values_from = c(conf.low, conf.high)) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, color = is_treated))+
  geom_linerange(aes(ymin = conf.low_1, ymax = conf.high_1), alpha = .5, linetype = "dashed")+
  geom_linerange(aes(ymin = conf.low_2, ymax = conf.high_2))+
  geom_point(aes(y = estimate))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr: Relativ zum ersten Treatment",
       y = "ATT: Miete (€/m²)",
       title = element_blank())

ggsave("../Output/plots/did/plot_did_miete_agg_dyn_cluster_comparison.pdf", width = 5, height = 4, device = cairo_pdf)
  

ggdid(mod_miete_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
ggdid(mod_miete_2_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
```

## Never-Treated Vergleichsgruppe

```{r}
mod_miete_never <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "nevertreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete_never

#ggdid(mod_miete_never)

tidy(mod_miete_never) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date)+
  scale_x_continuous(breaks = 1:20)+
  theme_bw()+
  theme(legend.position = "none")

mod_miete_never_agg_dyn <- did::aggte(mod_miete_never, type = "dynamic")
ggdid(mod_miete_never_agg_dyn)+
  coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = -6:10)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr: Relativ zum ersten Treatment",
       y = "ATT: Miete (€/m²)",
       title = element_blank())
```

## Nur Großstädte

```{r}
mod_miete_3 <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete_3

mod_miete_3_agg_dyn <- did::aggte(mod_miete_3, type = "dynamic")

bind_rows(
  tidy(mod_miete_agg_dyn),
  tidy(mod_miete_3_agg_dyn),
  .id = "id"
) %>%
  select(id, event.time, estimate, conf.low, conf.high) %>%
  #filter(event.time == 2) %>%
  pivot_wider(names_from = id, values_from = c(conf.low, conf.high)) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, color = is_treated))+
  geom_linerange(aes(ymin = conf.low_1, ymax = conf.high_1), alpha = .5)+
  geom_linerange(aes(ymin = conf.low_2, ymax = conf.high_2))+
  geom_point(aes(y = estimate))+
  theme_bw()

ggdid(mod_miete_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
ggdid(mod_miete_3_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
```

## Nur ländliche Gebiete

```{r}
mod_miete_4 <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete_4

mod_miete_4_agg_dyn <- did::aggte(mod_miete_4, type = "dynamic")

bind_rows(
  tidy(mod_miete_agg_dyn),
  tidy(mod_miete_4_agg_dyn),
  .id = "id"
) %>%
  select(id, event.time, estimate, conf.low, conf.high) %>%
  #filter(event.time == 2) %>%
  pivot_wider(names_from = id, values_from = c(conf.low, conf.high)) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, color = is_treated))+
  geom_linerange(aes(ymin = conf.low_1, ymax = conf.high_1), alpha = .5)+
  geom_linerange(aes(ymin = conf.low_2, ymax = conf.high_2))+
  geom_point(aes(y = estimate))+
  theme_bw()

ggdid(mod_miete_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
ggdid(mod_miete_4_agg_dyn)+
  coord_cartesian(ylim = c(-2.5, 2.5))
```

# Kauf

## Bevorzugte Spezifikation

```{r}
mod_kauf <- data_kauf_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_kauf

#ggdid(mod_kauf)

tidy(mod_kauf) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date, nrow = 2)+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr",
       y = "ATT: Kaufpreis (1000€)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_kauf.pdf", width = 5, height = 4, device = cairo_pdf)

mod_kauf_agg_dyn <- did::aggte(mod_kauf, type = "dynamic")
ggdid(mod_kauf_agg_dyn)+
  coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = -6:10)+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr: Relativ zum ersten Treatment",
       y = "ATT: Kaufpreis (1000€)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_kauf_agg_dyn.pdf", width = 5, height = 4, device = cairo_pdf)
  
mod_kauf_agg_group <- did::aggte(mod_kauf, type = "group")
ggdid(mod_kauf_agg_group)+
  scale_x_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "ATT: Kaufpreis (1000€)",
       y = "Halbjahr: Erstes Treatments",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_kauf_agg_group.pdf", width = 5, height = 4, device = cairo_pdf)

mod_kauf_agg_calendar <- did::aggte(mod_kauf, type = "calendar")
ggdid(mod_kauf_agg_calendar)+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr",
       y = "ATT: Kaufpreis (1000€)",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_kauf_agg_calendar.pdf", width = 5, height = 4, device = cairo_pdf)
```

## Ohne PLZ Clustering

```{r}
mod_kauf_2 <- data_kauf_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_kauf_2

mod_kauf_2_agg_dyn <- did::aggte(mod_kauf_2, type = "dynamic")
ggdid(mod_kauf_2_agg_dyn)
```

Vergleich

```{r}
bind_rows(
  tidy(mod_kauf_agg_dyn),
  tidy(mod_kauf_2_agg_dyn),
  .id = "id"
) %>%
  select(id, event.time, estimate, conf.low, conf.high) %>%
  #filter(event.time == 2) %>%
  pivot_wider(names_from = id, values_from = c(conf.low, conf.high)) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, color = is_treated))+
  geom_linerange(aes(ymin = conf.low_1, ymax = conf.high_1), alpha = .5, linetype = "dashed")+
  geom_linerange(aes(ymin = conf.low_2, ymax = conf.high_2))+
  geom_point(aes(y = estimate))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Halbjahr: Relativ zum ersten Treatment",
       y = "ATT: Kaufpreis (1000€)",
       title = element_blank())

ggsave("../Output/plots/did/plot_did_kauf_agg_dyn_cluster_comparison.pdf", width = 5, height = 4, device = cairo_pdf)

ggdid(mod_kauf_agg_dyn)+
  coord_cartesian(ylim = c(-3e5, 3e5))
ggdid(mod_kauf_2_agg_dyn)+
  coord_cartesian(ylim = c(-3e5, 3e5))
```

# Tabelle

## Miete

Tabelle mit Werten für 1 Jahr nach Treatment für die verschiedenen Modelle

```{r}
f_tidy_agg <- function(.x, type = "dynamic", event_time_filter = 2) {
  did::aggte(.x, type = type) %>%
    tidy(.x) %>% 
    select(event.time, estimate, conf.low, conf.high) %>%
    filter(event.time == event_time_filter)
}

bind_rows(
  f_tidy_agg(mod_miete_agg_dyn) %>% mutate(typ = "Bevorzugt"),
  f_tidy_agg(mod_miete_2_agg_dyn) %>% mutate(typ = "Nur Cell Cluster"),
  f_tidy_agg(mod_miete_never_agg_dyn) %>% mutate(typ = "Never Treated")
)
```

```{r}
# First, create a base parameter list with your default settings
base_params <- list(
  data = data_miete_complete,
  yname = "mean_mietekalt_m2",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + 
            gemeindetyp_name + durchschnittsalter + anzahl_haushalte + 
            einkommen + einkommen_delta,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  alp = 0.05,
  est_method = "dr",
  base_period = "varying",
  biter = 1000,
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE,
  print_details = FALSE
)

# Define your model variations
model_specs <- list(
  model1 = list(
    clustervars = c("xy_mp", "plz"),
    control_group = "notyettreated"
  ),
  model2 = list(
    clustervars = c("xy_mp"),  # different clustering
    control_group = "notyettreated"
  ),
  model3 = list(
    clustervars = c("xy_mp", "plz"),
    control_group = "nevertreated"  # different control group
  ),
  model4 = list(
    clustervars = c("xy_mp", "plz"),
    control_group = "notyettreated",
    xformla = NULL  # no covariates
  )
)

# Function to merge base parameters with model-specific parameters
run_model <- function(model_params) {
  final_params <- modifyList(base_params, model_params)
  do.call(att_gt, final_params)
}

# Run all models
models <- model_specs %>%
  purrr::map(run_model, .progress = TRUE)
```

```{r}
# First, let's extract the relevant statistics for each model
table_stats <- models %>%
  purrr::map_dfr(
    ~f_tidy_agg(.x, type = "dynamic", event_time_filter = 2),
    .id = "model",
    .progress = TRUE
  )

table_stats %>%
  mutate(params = model_specs)
```

# Sensitivitätsanalyse

## Miete

`HosestDiD` von [Rambach & Roth 2023](https://academic.oup.com/restud/article-abstract/90/5/2555/7039335). Das Helper-Skript ist von [hier](https://github.com/pedrohcgs/CS_RR).

```{r}
#set.seed(1)
sample_cells <- data_kauf_complete %>%
  filter(n_cell > 100) %>%
  distinct(xy_mp) %>%
  slice_sample(n = 1000) %>%
  pull()

mod_kauf_honest_did <- data_kauf_complete %>%
  filter(xy_mp %in% sample_cells) %>%
  #filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "universal",
    clustervars = c("xy_mp", "plz"),
    biter = 100,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = FALSE,
    print_details = FALSE
  )

mod_kauf_honest_did$Wpval

mod_kauf_honest_did_agg_dyn <- did::aggte(mod_kauf_honest_did, type = "dynamic",
                                          min_e = -6, max_e = 4)
ggdid(mod_kauf_honest_did_agg_dyn)
```


```{r}
source("honest_did_helper.R")
# ----
# mod_kauf_honest_did_agg_dyn_honest_smooth <- honest_did(
#   es = mod_kauf_honest_did_agg_dyn,
#   e = 0,
#   type = "smoothness",
#   Mvec = seq(from = 0, to = 1, length.out = 5)
#   )
# mod_kauf_honest_did_agg_dyn_honest_smooth


mod_kauf_honest_did_agg_dyn_honest_rel <- honest_did(
  es = mod_kauf_honest_did_agg_dyn,
  e = 0,
  type = "relative_magnitude",
  Mbarvec = seq(from = 0, to = 0.5, length.out = 10)
)
mod_kauf_honest_did_agg_dyn_honest_rel
# Drop 0 as that is not really allowed.
mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci <- mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
# createSensitivityPlot(mod_kauf_honest_did_agg_dyn_honest_smooth$robust_ci,
#                       mod_kauf_honest_did_agg_dyn_honest_smooth$orig_ci)

createSensitivityPlot_relativeMagnitudes(mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci,
                                         mod_kauf_honest_did_agg_dyn_honest_rel$orig_ci)
```

## Beispiel

https://github.com/pedrohcgs/CS_RR?tab=readme-ov-file#effect-of-minimum-wage-on-teen-employment-replicating-callaway-and-santanna-2021

```{r}
min_wage <- read_rds("../Daten/Sonstige/min_wage_CS.rds")

# Formula for covariates 
xformla <- ~ region + (medinc + pop ) + I(pop^2) + I(medinc^2)  + white + hs  + pov
#---------------------------------------------------------------------------
# Using covariates and DR DiD with never-treated as comparison group
# Fix the reference time periods
CS_never_cond <- did::att_gt(yname="lemp",
                             tname="year",
                             idname="countyreal",
                             gname="first.treat",
                             #xformla=~1,
                             xformla = xformla,
                             control_group="nevertreated",
                             data = min_wage,
                             panel = TRUE,
                             base_period="universal",
                             bstrap = TRUE,
                             cband = TRUE)
# Now, compute event study
CS_es_never_cond <- aggte(CS_never_cond, type = "dynamic",
                          min_e = -5, max_e = 5)
#summary(CS_es_never_cond)
# Plot event study
ggdid(CS_es_never_cond)
```

```{r}
source("honest_did_helper.R")
# code for running honest_did
hd_cs_smooth_never <- honest_did(es = CS_es_never_cond,
                           e = 0,
                           type="smoothness")
hd_cs_smooth_never


hd_cs_rm_never <- honest_did(es = CS_es_never_cond, 
                          e = 0,
                          type="relative_magnitude")
hd_cs_rm_never
# Drop 0 as that is not really allowed.
hd_cs_rm_never$robust_ci <- hd_cs_rm_never$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
cs_HDiD_smooth <- createSensitivityPlot(hd_cs_smooth_never$robust_ci,
                      hd_cs_smooth_never$orig_ci)
cs_HDiD_smooth

cs_HDiD_relmag <- createSensitivityPlot_relativeMagnitudes(hd_cs_rm_never$robust_ci,
                                         hd_cs_rm_never$orig_ci)

cs_HDiD_relmag
```

## Simulation

Um rauszufinden, wie sensibel der Wald-Test für die Pretrends und `honestDiD` sind, hier eine Simulation mit einem synthetischen Datensatz.

Was auffällt: Mit vielen Gruppen (Achtung, nicht Gruppen im Sinne von CS21) ist der Wald-Test sehr sensibel. Das heißt, auch winzige Abweichungen bei den Pretrends (z.B. 1% unterschiedliche Steigung) werden erkannt und der p-Wert ist nahe Null.

[Hier](https://chat.maulwurf.fun/share/rny9CO7eNsA-r35oMip_z) eine Erklärung von o1

```{r}
set.seed(1)

# Parameters
n_ids <- 100000
n_time <- 10
treatment_time <- 5
treated_ids <- 1:(100000*0.2)
base_slopes <- c(rep(1.005, length(treated_ids)), 
                 rep(1, n_ids - length(treated_ids)))  # Set slope for each id
treatment_multiplier <- 2  # Slopes double after treatment
treatment_jump <- 0 # Jump in the treatment periode

# Create base data
dat <- expand_grid(
  id = 1:n_ids,
  time = 1:n_time
) %>%
  # Add treatment indicator and first treatment time
  mutate(
    first_treat = if_else(id %in% treated_ids, treatment_time, 0),
    treat = if_else(first_treat != 0 & time >= first_treat, 1, 0)
  ) %>%
  # Generate y values
  group_by(id) %>%
  mutate(
    slope = base_slopes[id],
    y = case_when(
      treat == 0 ~ slope * time + rnorm(n(), 0, 0.5),
      treat == 1 ~ slope * treatment_time + 
                   slope * treatment_multiplier * (time - treatment_time) +
                   treatment_jump + rnorm(n(), 0, 0.5)
    )
  ) %>%
  ungroup() %>%
  select(time, id, y, treat, first_treat)

# View first few rows
dat

# dat %>%
#   ggplot(aes(x = time, y = y, color = as.factor(first_treat), group = as.factor(id)))+
#   geom_line()+
#   theme(legend.position = "none")

set.seed(1)
dat %>%
  filter(id %in% sample(treated_ids, 3) |
           id %in% sample(setdiff(1:n_ids, treated_ids), 3)) %>%
  mutate(is_treated = if_else(first_treat == 5, "Treated", "Not Treated")) %>%
  ggplot(aes(x = time, y = y, color = is_treated, group = as.factor(id)))+
  geom_line()+
  scale_x_continuous(breaks = 1:10)+
  theme_bw()+
  theme(legend.position = "top")+
  labs(x = "Zeit", y = "Zielgröße", color = element_blank())
ggsave("../Output/plots/did/plot_did_simulation.pdf", width = 3, height = 3, device = cairo_pdf)
```


```{r}
cs21 = att_gt(
  yname         = "y",
  tname         = "time",
  idname        = "id",
  gname         = "first_treat",
  #xformla       = NULL,            # No additional controls in this dataset 
  control_group = "nevertreated", # Too few groups for "nevertreated" default
  clustervars   = "id", 
  data          = dat,
  base_period = "universal"
  )
cs21$Wpval

#ggdid(cs21)

cs21_agg_dyn <- aggte(cs21, type = "dynamic",
                      min_e = -5, max_e = 5)
ggdid(cs21_agg_dyn)+
  scale_x_continuous(breaks = -4:5)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT",
       title = element_blank())
ggsave("../Output/plots/did/plot_did_simulation_agg_dyn.pdf", width = 3, height = 3, device = cairo_pdf)
```

```{r}
source("honest_did_helper.R")
# code for running honest_did
cs21_agg_dyn_honest_smooth <- honest_did(es = cs21_agg_dyn,
                           e = 0,
                           type="smoothness")
cs21_agg_dyn_honest_smooth


cs21_agg_dyn_honest_rel <- honest_did(es = cs21_agg_dyn, 
                          e = 0,
                          type="relative_magnitude",
                          Mbarvec = seq(from = 0, to = .5, length.out = 10)
                          )
cs21_agg_dyn_honest_rel
# Drop 0 as that is not really allowed.
cs21_agg_dyn_honest_rel$robust_ci <- cs21_agg_dyn_honest_rel$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
createSensitivityPlot(cs21_agg_dyn_honest_smooth$robust_ci,
                      cs21_agg_dyn_honest_smooth$orig_ci)

createSensitivityPlot_relativeMagnitudes(cs21_agg_dyn_honest_rel$robust_ci,
                                         cs21_agg_dyn_honest_rel$orig_ci)
```