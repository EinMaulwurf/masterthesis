---
title: "did"
format: html
editor_options: 
  chunk_output_type: inline
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(arrow)
library(did)
library(broom)
library(did2s)
library(HonestDiD)
source("honest_did_helper.R")
```

# Import

```{r}
dates_pseudo_halbjahr <- read_parquet("../Daten/dates_pseudo_halbjahr.parquet")

data_miete_complete <- read_parquet("../Daten/RWI_GEO_REDX/Daten_Miete/data_miete_complete.parquet")
data_kauf_complete <- read_parquet("../Daten/RWI_GEO_REDX/Daten_Kauf/data_kauf_complete.parquet")
```

# Bevorzugte Spezifikation

- Keine `fill`ed in Zellen
- Clustering auf Ebene der PLZ
- Controlgroup not-yet-treated
- Erklärende Variable `median_baujahr`
- ...

## Miete

```{r}
mod_miete <- data_miete_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_mietekalt_m2",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_miete

#ggdid(mod_miete)

tidy(mod_miete) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date, nrow = 2, scales = "free")+
  #scale_x_continuous(breaks = 1:20)+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr ($t$)"),
       y = latex2exp::TeX("$ATT(g,t)$: Miete (€/m²)"))
ggsave("../Output/plots/did/plot_did_miete.pdf", width = 6, height = 4, device = cairo_pdf)

mod_miete_agg_dyn <- did::aggte(mod_miete, type = "dynamic")
tidy(mod_miete_agg_dyn) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(-6, 10, 2))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr rel. ($e$)"),
       y = latex2exp::TeX("$ATT_{dyn}(e)$: Miete (€/m²)"))
ggsave("../Output/plots/did/plot_did_miete_agg_dyn.pdf", width = 3, height = 3, device = cairo_pdf)
  
mod_miete_agg_group <- did::aggte(mod_miete, type = "group", max_e = 4)
tidy(mod_miete_agg_group) %>%
  filter(group != "Average") %>%
  mutate(group = factor(group, levels = as.character(sort(as.numeric(group))))) %>%
  ggplot(aes(y = estimate, x = group, ymin = conf.low, ymax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Gruppe ($\\tilde{g}$)"),
       y = latex2exp::TeX("$ATT_{group}^{bal}(\\tilde{g}, e_{max})$: Miete (€/m²)"))
ggsave("../Output/plots/did/plot_did_miete_agg_group.pdf", width = 3, height = 3, device = cairo_pdf)

mod_miete_agg_calendar <- did::aggte(mod_miete, type = "calendar")
tidy(mod_miete_agg_calendar) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  #coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(8, 17, 2))+
  scale_y_continuous(breaks = seq(-1, 1, by = 0.5))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr ($\\tilde{t}$)"),
       y = latex2exp::TeX("$ATT_{cal}(\\tilde{t})$: Miete (€/m²)"))
ggsave("../Output/plots/did/plot_did_miete_agg_calendar.pdf", width = 3, height = 3, device = cairo_pdf)
```

## Kauf

```{r}
mod_kauf <- data_kauf_complete %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_kauf

#ggdid(mod_kauf)

tidy(mod_kauf) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date, nrow = 2, scales = "free")+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr ($t$)"),
       y = latex2exp::TeX("$ATT(g,t)$: Kaufpreis (1000€)"))
ggsave("../Output/plots/did/plot_did_kauf.pdf", width = 6, height = 4, device = cairo_pdf)

mod_kauf_agg_dyn <- did::aggte(mod_kauf, type = "dynamic")
tidy(mod_kauf_agg_dyn) %>%
  mutate(is_treated = event.time >= 0) %>%
  ggplot(aes(x = event.time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(-6, 10, 2))+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr rel. ($e$)"),
       y = latex2exp::TeX("$ATT_{dyn}(e)$: Kaufpreis (1000€)"))
ggsave("../Output/plots/did/plot_did_kauf_agg_dyn.pdf", width = 3, height = 3, device = cairo_pdf)
  
mod_kauf_agg_group <- did::aggte(mod_kauf, type = "group", max_e = 4)
tidy(mod_kauf_agg_group) %>%
  filter(group != "Average") %>%
  mutate(group = factor(group, levels = as.character(sort(as.numeric(group))))) %>%
  ggplot(aes(y = estimate, x = group, ymin = conf.low, ymax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Gruppe ($\\tilde{g}$)"),
       y = latex2exp::TeX("$ATT_{group}^{bal}(\\tilde{g}, e_{max})$: Kaufpreis (1000€)"))
ggsave("../Output/plots/did/plot_did_kauf_agg_group.pdf", width = 3, height = 3, device = cairo_pdf)

mod_kauf_agg_calendar <- did::aggte(mod_kauf, type = "calendar")
tidy(mod_kauf_agg_calendar) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  #coord_cartesian(xlim = c(-6, 10))+
  scale_x_continuous(breaks = seq(8, 17, 2))+
  scale_y_continuous(breaks = seq(-150000, 150000, by = 75000),
                     labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr ($\\tilde{t}$)"),
       y = latex2exp::TeX("$ATT_{cal}(\\tilde{t})$: Kaufpreis (1000€)"))
ggsave("../Output/plots/did/plot_did_kauf_agg_calendar.pdf", width = 3, height = 3, device = cairo_pdf)
```

# Räumliche Subsets

## Miete

```{r}
base_params_subset_miete <- list(
  yname = "mean_mietekalt_m2",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

model_specs_subset_miete <- list(
  model1 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0)
  ),
  model2 = list(
    data = data_miete_complete,
    allow_unbalanced_panel = FALSE
  ),
  model3 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Großstadt")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote
  ),
  model4 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Mittelstadt")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote
  ),
  model5 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Landgemeinde")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote
  ),
  model6 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Landgemeinde")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
    weightsname = NULL,
    clustervars = "xy_mp"
  )
)

models_räumlich_miete <- model_specs_subset_miete %>%
  map(~ modifyList(base_params_subset_miete, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_räumlich_miete_agg_dyn_tidy <- models_räumlich_miete %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_räumlich_miete_agg_dyn_tidy, "../Daten/Sonstige/models_räumlich_miete_agg_dyn_tidy.parquet")
#models_räumlich_miete_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_räumlich_miete_agg_dyn_tidy.parquet")
```

```{r}
models_räumlich_miete_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-2, 2, by = 0.5))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Miete (€/m²)"),
       y = "Modell")

ggsave("../Output/plots/did/plot_did_raeumlich_miete.pdf", width = 3, height = 3, device = cairo_pdf)
```

## Kauf

```{r}
base_params_subset_kauf <- list(
  yname = "mean_kaufpreis",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

model_specs_subset_kauf <- list(
  model1 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0)
  ),
  model2 = list(
    data = data_kauf_complete,
    allow_unbalanced_panel = FALSE
  ),
  model3 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Großstadt")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + eigentuemerquote # + einkommen + einkommen_delta wegen Singularität
  ),
  model4 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Mittelstadt")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote
  ),
  model5 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Landgemeinde")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote
  ),
  model6 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0) %>% filter(gemeindetyp_name %in% c("Landgemeinde")),
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
    weightsname = NULL,
    clustervars = "xy_mp"
  )
)

models_räumlich_kauf <- model_specs_subset_kauf %>%
  map(~ modifyList(base_params_subset_kauf, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_räumlich_kauf_agg_dyn_tidy <- models_räumlich_kauf %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_räumlich_kauf_agg_dyn_tidy, "../Daten/Sonstige/models_räumlich_kauf_agg_dyn_tidy.parquet")
#models_räumlich_kauf_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_räumlich_kauf_agg_dyn_tidy.parquet")
```

```{r}
models_räumlich_kauf_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-60000, 60000, by = 20000), labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Kaufpreis (1000€)"),
       y = "Modell")

ggsave("../Output/plots/did/plot_did_raeumlich_kauf.pdf", width = 3, height = 3, device = cairo_pdf)
```

# Subset Gebäudetypen

## Miete

```{r}
base_params_subset_gebäudetyp_miete <- list(
  yname = "mean_mietekalt_m2",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

model_specs_subset_gebäudetyp_miete <- list(
  model1 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0)
  ),
  model2 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0, anteil_efh > 0.9)
  ),
  model3 = list(
    data = data_miete_complete %>% filter(n_cell_date > 0, anteil_efh <= 0.9)
  )
)


models_gebäudetyp_miete <- model_specs_subset_gebäudetyp_miete %>%
  map(~ modifyList(base_params_subset_gebäudetyp_miete, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_gebäudetyp_miete_agg_dyn_tidy <- models_gebäudetyp_miete %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_gebäudetyp_miete_agg_dyn_tidy, "../Daten/Sonstige/models_gebäudetyp_miete_agg_dyn_tidy.parquet")
#models_räumlich_miete_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_räumlich_miete_agg_dyn_tidy.parquet")
```

```{r}
models_gebäudetyp_miete_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-60000, 60000, by = 20000), labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Miete (€/m²)"),
       y = "Modell")

#ggsave("../Output/plots/did/plot_did_raeumlich_kauf.pdf", width = 3, height = 3, device = cairo_pdf)
```

## Kauf

```{r}
base_params_subset_gebäudetyp_kauf <- list(
  yname = "mean_kaufpreis",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

model_specs_subset_gebäudetyp_kauf <- list(
  model1 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0)
  ),
  model2 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0, anteil_efh > 0.9)
  ),
  model3 = list(
    data = data_kauf_complete %>% filter(n_cell_date > 0, anteil_efh <= 0.9)
  )
)


models_gebäudetyp_kauf <- model_specs_subset_gebäudetyp_kauf %>%
  map(~ modifyList(base_params_subset_gebäudetyp_kauf, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_gebäudetyp_kauf_agg_dyn_tidy <- models_gebäudetyp_kauf %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_gebäudetyp_kauf_agg_dyn_tidy, "../Daten/Sonstige/models_gebäudetyp_kauf_agg_dyn_tidy.parquet")
#models_gebäudetyp_kauf_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_gebäudetyp_kauf_agg_dyn_tidy.parquet")
```

```{r}
models_gebäudetyp_kauf_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-60000, 60000, by = 20000), labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Kaufpreis (1000€)"),
       y = "Modell")

#ggsave("../Output/plots/did/plot_did_raeumlich_kauf.pdf", width = 3, height = 3, device = cairo_pdf)
```


# Alternativ Modellspezifikationen

## Miete

```{r}
# First, create a base parameter list with your default settings
base_params_miete <- list(
  data = data_miete_complete %>% filter(n_cell_date > 0),
  yname = "mean_mietekalt_m2",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

# Define your model variations
model_specs_miete <- list(
  # Bevorzugte Spezifikation
  model1 = list(
    # Keine Änderung
  ),
  # Individuelles Clustering
  model2 = list(
    clustervars = c("xy_mp")
  ),
  # Never-Treated Controlgroup
  model3 = list(
    control_group = "nevertreated"
  ),
  # Keine erklärenden Variablen
  model4 = list(
    xformla = NULL
  ),
  # Keine Gewichtung nach Anzahl Haushalte
  model5 = list(
    weightsname = NULL
  )#,
  # Completed Panel | Gibt Probleme mit der modifyList() Funktion
  # model6 = list(
  #   data = data_miete_complete,
  #   allow_unbalanced_panel = FALSE
  # ),
)

# Run all models
models_miete <- model_specs_miete %>%
  map(~modifyList(base_params_miete, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_miete_agg_dyn_tidy <- models_miete %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_miete_agg_dyn_tidy, "../Daten/Sonstige/models_miete_agg_dyn_tidy.parquet")
#models_miete_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_miete_agg_dyn_tidy.parquet")
```

```{r}
models_miete_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-2, 2, by = 0.25))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Miete (€/m²)"),
       y = "Modell")

ggsave("../Output/plots/did/plot_did_alternative_miete.pdf", width = 3, height = 3, device = cairo_pdf)
```

## Kauf

```{r}
# First, create a base parameter list with your default settings
base_params_kauf <- list(
  data = data_kauf_complete %>% filter(n_cell_date > 0),
  yname = "mean_kaufpreis",
  tname = "date_pseudo_halbjahr",
  idname = "xy_mp",
  gname = "got_fiber_date_pseudo_halbjahr",
  xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
  weightsname = "anzahl_haushalte",
  anticipation = 0,
  control_group = "notyettreated",
  est_method = "dr",
  base_period = "varying",
  clustervars = c("xy_mp", "plz"),
  pl = TRUE,
  cores = 6,
  allow_unbalanced_panel = TRUE
)

# Define your model variations
model_specs_kauf <- list(
  # Bevorzugte Spezifikation
  model1 = list(
    # Keine Änderung
  ),
  # Individuelles Clustering
  model2 = list(
    clustervars = c("xy_mp")
  ),
  # Never-Treated Controlgroup
  model3 = list(
    control_group = "nevertreated"
  ),
  # Keine erklärenden Variablen
  model4 = list(
    xformla = NULL
  ),
  # Keine Gewichtung nach Anzahl Haushalte
  model5 = list(
    weightsname = NULL
  )#,
  # Completed Panel | Gibt Probleme mit der modifyList() Funktion
  # model6 = list(
  #   data = data_miete_complete,
  #   allow_unbalanced_panel = FALSE
  # ),
)

# Run all models
models_kauf <- model_specs_kauf %>%
  map(~modifyList(base_params_kauf, .x)) %>%
  map(~do.call(att_gt, .x), .progress = TRUE)

# Calculate dynamig aggregation
models_kauf_agg_dyn_tidy <- models_kauf %>%
  purrr::map(
    ~did::aggte(.x, type = "dynamic"),
    .progress = TRUE
  ) %>%
  map(tidy) %>%
  bind_rows(.id = "model")

# Save results
write_parquet(models_kauf_agg_dyn_tidy, "../Daten/Sonstige/models_kauf_agg_dyn_tidy.parquet")
#models_kauf_agg_dyn_tidy <- read_parquet("../Daten/Sonstige/models_kauf_agg_dyn_tidy.parquet")
```

```{r}
models_kauf_agg_dyn_tidy %>%
  mutate(number_clean = str_extract(model, "\\d+$") %>% as.numeric(),
         name_clean = paste0("(", as.roman(number_clean), ")") %>% fct_reorder(number_clean, .desc = TRUE)) %>%
  filter(event.time == 2) %>%
  select(model, name_clean, estimate, conf.low, conf.high) %>%
  ggplot(aes(x = estimate, y = name_clean, xmin = conf.low, xmax = conf.high))+
  geom_point(size = 1.5)+
  geom_linerange()+
  geom_vline(xintercept = 0, linetype = "dashed")+
  scale_x_continuous(breaks = seq(-60000, 60000, by = 20000), labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  labs(x = latex2exp::TeX("$ATT_{dyn}(e=2)$: Kaufpreis (1000€)"),
       y = "Modell")

ggsave("../Output/plots/did/plot_did_alternative_kauf.pdf", width = 3, height = 3, device = cairo_pdf)
```

# Sensitivitätsanalyse

## Miete

`HosestDiD` von [Rambach & Roth 2023](https://academic.oup.com/restud/article-abstract/90/5/2555/7039335). Das Helper-Skript ist von [hier](https://github.com/pedrohcgs/CS_RR).

```{r}
#set.seed(1)
sample_cells <- data_kauf_complete %>%
  filter(n_cell > 100) %>%
  distinct(xy_mp) %>%
  slice_sample(n = 1000) %>%
  pull()

mod_kauf_honest_did <- data_kauf_complete %>%
  filter(xy_mp %in% sample_cells) %>%
  #filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + einkommen + einkommen_delta + eigentuemerquote,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "universal",
    clustervars = c("xy_mp", "plz"),
    biter = 100,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = FALSE,
    print_details = FALSE
  )

mod_kauf_honest_did$Wpval

mod_kauf_honest_did_agg_dyn <- did::aggte(mod_kauf_honest_did, type = "dynamic",
                                          min_e = -6, max_e = 4)
ggdid(mod_kauf_honest_did_agg_dyn)
```


```{r}
source("honest_did_helper.R")
# ----
# mod_kauf_honest_did_agg_dyn_honest_smooth <- honest_did(
#   es = mod_kauf_honest_did_agg_dyn,
#   e = 0,
#   type = "smoothness",
#   Mvec = seq(from = 0, to = 1, length.out = 5)
#   )
# mod_kauf_honest_did_agg_dyn_honest_smooth


mod_kauf_honest_did_agg_dyn_honest_rel <- honest_did(
  es = mod_kauf_honest_did_agg_dyn,
  e = 0,
  type = "relative_magnitude",
  Mbarvec = seq(from = 0, to = 0.5, length.out = 10)
)
mod_kauf_honest_did_agg_dyn_honest_rel
# Drop 0 as that is not really allowed.
mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci <- mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
# createSensitivityPlot(mod_kauf_honest_did_agg_dyn_honest_smooth$robust_ci,
#                       mod_kauf_honest_did_agg_dyn_honest_smooth$orig_ci)

createSensitivityPlot_relativeMagnitudes(mod_kauf_honest_did_agg_dyn_honest_rel$robust_ci,
                                         mod_kauf_honest_did_agg_dyn_honest_rel$orig_ci)
```

## Beispiel

https://github.com/pedrohcgs/CS_RR?tab=readme-ov-file#effect-of-minimum-wage-on-teen-employment-replicating-callaway-and-santanna-2021

```{r}
min_wage <- read_rds("../Daten/Sonstige/min_wage_CS.rds")

# Formula for covariates 
xformla <- ~ region + (medinc + pop ) + I(pop^2) + I(medinc^2)  + white + hs  + pov
#---------------------------------------------------------------------------
# Using covariates and DR DiD with never-treated as comparison group
# Fix the reference time periods
CS_never_cond <- did::att_gt(yname="lemp",
                             tname="year",
                             idname="countyreal",
                             gname="first.treat",
                             #xformla=~1,
                             xformla = xformla,
                             control_group="nevertreated",
                             data = min_wage,
                             panel = TRUE,
                             base_period="universal",
                             bstrap = TRUE,
                             cband = TRUE)
# Now, compute event study
CS_es_never_cond <- aggte(CS_never_cond, type = "dynamic",
                          min_e = -5, max_e = 5)
#summary(CS_es_never_cond)
# Plot event study
ggdid(CS_es_never_cond)
```

```{r}
source("honest_did_helper.R")
# code for running honest_did
hd_cs_smooth_never <- honest_did(es = CS_es_never_cond,
                           e = 0,
                           type="smoothness")
hd_cs_smooth_never


hd_cs_rm_never <- honest_did(es = CS_es_never_cond, 
                          e = 0,
                          type="relative_magnitude")
hd_cs_rm_never
# Drop 0 as that is not really allowed.
hd_cs_rm_never$robust_ci <- hd_cs_rm_never$robust_ci[-1,]

## -----------------------------------------------------------------------------
# make sensitivity analysis plots
cs_HDiD_smooth <- createSensitivityPlot(hd_cs_smooth_never$robust_ci,
                      hd_cs_smooth_never$orig_ci)
cs_HDiD_smooth

cs_HDiD_relmag <- createSensitivityPlot_relativeMagnitudes(hd_cs_rm_never$robust_ci,
                                         hd_cs_rm_never$orig_ci)

cs_HDiD_relmag
```

# Test mit `staggered`

Package nach Roth and Sant'Anna (2023), [arXiv](https://arxiv.org/abs/2102.01291v7) und [GitHub](https://github.com/jonathandroth/staggered)

```{r}
library(staggered)
```

Einzelne Werte, demnach wäre beim Kauf ein Preiszuwachs statistisch signifikant, bei Miete aber nicht.

```{r}
data_miete_complete %>%
  #filter(n_cell_date > 0) %>%
  staggered(df = .,
            i = "xy_mp",
            t = "date_pseudo_halbjahr",
            g = "got_fiber_date_pseudo_halbjahr",
            y = "mean_mietekalt_m2",
            estimand = "cohort") %>% # simple cohort calendar eventstudy
  mutate(conf.low = estimate-1.96*se,
         conf.high = estimate+1.96*se,
         is_significant = sign(conf.low) == sign(conf.high))

data_kauf_complete %>%
  #filter(n_cell_date > 0) %>%
  staggered(df = .,
            i = "xy_mp",
            t = "date_pseudo_halbjahr",
            g = "got_fiber_date_pseudo_halbjahr",
            y = "mean_kaufpreis",
            estimand = "cohort") %>%
  mutate(conf.low = estimate-1.96*se,
         conf.high = estimate+1.96*se,
         is_significant = sign(conf.low) == sign(conf.high))
```

```{r}
data_kauf_complete %>%
  #filter(n_cell_date > 0) %>%
  staggered(df = .,
            i = "xy_mp",
            t = "date_pseudo_halbjahr",
            g = "got_fiber_date_pseudo_halbjahr",
            y = "mean_kaufpreis",
            estimand = "eventstudy",
            eventTime = -6:8) %>%
  ggplot(aes(x = eventTime, y = estimate, ymin = estimate-1.96*se, ymax = estimate+1.96*se))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT",
       title = element_blank())

data_miete_complete %>%
  #filter(n_cell_date > 0) %>%
  staggered(df = .,
            i = "xy_mp",
            t = "date_pseudo_halbjahr",
            g = "got_fiber_date_pseudo_halbjahr",
            y = "mean_mietekalt_m2",
            estimand = "eventstudy",
            eventTime = -6:6) %>%
  ggplot(aes(x = eventTime, y = estimate, ymin = estimate-1.96*se, ymax = estimate+1.96*se))+
  geom_linerange()+
  geom_point(size = 1.5)+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = "Zeit",
       y = "ATT",
       title = element_blank())
```

Nochmal das gleiche, aber über das `did2s` Package

```{r}
did2s_staggered <- did2s::event_study(
  yname         = "mean_kaufpreis",
  tname         = "date_pseudo_halbjahr",
  idname        = "xy_mp",
  gname         = "got_fiber_date_pseudo_halbjahr",
  data          = data_kauf_complete,
  estimator = c("staggered") # TWFE
)

did2s::plot_event_study(did2s_staggered)
```

# Test: Nur Gebiete mit sonst schlechtem Internet

```{r}
max_speed <- read_parquet("../Daten/Breitbandatlas/Raster_1km_max_speed.parquet")

coords_schlechtes_internet <- max_speed %>%
  filter(is.na(max_speed_no_fiber) | max_speed_no_fiber < 100) %>%
  filter(date > 202100) %>%
  distinct(x_mp, y_mp)

coords_schlechtes_internet %>%
  add_laea_grid(size = 1000) %>%
  ggplot()+
  geom_sf()+
  geom_sf(data = deutschland, fill = NA)

data_kauf_complete %>%
  inner_join(coords_schlechtes_internet, by = join_by(x_mp, y_mp))
```

```{r}
mod_kauf <- data_kauf_complete %>%
  anti_join(coords_schlechtes_internet, by = join_by(x_mp, y_mp)) %>%
  filter(n_cell_date > 0) %>%
  #filter(n_cell > 10) %>%
  #filter(!gemeindetyp_name %in% c("Großstadt")) %>%
  att_gt(
    data = .,
    yname = "mean_kaufpreis",
    tname = "date_pseudo_halbjahr",
    idname = "xy_mp",
    gname = "got_fiber_date_pseudo_halbjahr",
    #xformla = ~ median_baujahr + median_wohnflaeche + median_zimmeranzahl + gemeindetyp_name + durchschnittsalter + anzahl_haushalte + eigentuemerquote,
    weightsname = "anzahl_haushalte",
    anticipation = 0,
    alp = 0.05,
    control_group = "notyettreated",
    est_method = "dr",
    base_period = "varying",
    #clustervars = c("xy_mp", "plz"),
    biter = 1000,
    pl = TRUE,
    cores = 6,
    allow_unbalanced_panel = TRUE,
    print_details = FALSE
  )
mod_kauf

#ggdid(mod_kauf)

tidy(mod_kauf) %>%
  left_join(dates_pseudo_halbjahr %>% filter(date %% 100 %in% c(6, 12)),
            by = join_by(group == date_pseudo_halbjahr)) %>%
  mutate(is_treated = time >= group) %>%
  ggplot(aes(x = time, y = estimate, ymin = conf.low, ymax = conf.high, color = is_treated))+
  geom_linerange()+
  geom_point()+
  geom_hline(aes(yintercept = 0), linetype = "dashed")+
  facet_wrap(~date, nrow = 2, scales = "free")+
  scale_y_continuous(labels = scales::label_number(scale = 1/1000))+
  theme_bw()+
  theme(legend.position = "none")+
  labs(x = latex2exp::TeX("Halbjahr ($t$)"),
       y = latex2exp::TeX("$ATT(g,t)$: Kaufpreis (1000€)"))
```
