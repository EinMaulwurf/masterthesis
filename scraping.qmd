---
title: "scraping"
format: html
---

```{r}
#library(httr)
library(httr2)
#library(jsonlite)
library(tidyverse)
library(sf)
library(arrow)
#library(geoarrow)
#library(sfarrow)
```

```{r}
deutschland <- giscoR::gisco_get_countries(country = "DE") %>% st_transform(3035)
gemeinden <- giscoR::gisco_get_communes(country = "DE") %>% st_transform(3035)
bundesländer <- giscoR::gisco_get_nuts(country = "DE", nuts_level = 1) %>% st_transform(3035)
hessen <- bundesländer %>% filter(NUTS_NAME == "HESSEN")
```


```
curl 'https://buergerplattform-prod2.production.netzda-mig.org/server/rest/services/Hosted/verwaltungsgebiete_004/FeatureServer/1/query?f=geojson&geometry=%7B%22xmin%22%3A46
9629.1017840004%2C%22ymin%22%3A5537709.825203005%2C%22xmax%22%3A489196.98102500045%2C%22ymax%22%3A5557277.704444005%7D&maxRecordCountFactor=3&orderByFields=objectid&outFields=
*&outSR=25832&quantizationParameters=%7B%22extent%22%3A%7B%22spatialReference%22%3A%7B%22wkid%22%3A25832%7D%2C%22xmin%22%3A469629.1017840004%2C%22ymin%22%3A5537709.825203005%2
C%22xmax%22%3A489196.98102500045%2C%22ymax%22%3A5557277.704444005%7D%2C%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A38.21851414257816%7
D&resultType=tile&returnCentroid=true&returnExceededLimitFeatures=false&spatialRel=esriSpatialRelIntersects&where=1%3D1&geometryType=esriGeometryEnvelope&inSR=25832' --compres
sed -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:131.0) Gecko/20100101 Firefox/131.0' -H 'Accept: */*' -H 'Accept-Language: de,en-US;q=0.7,en;q=0.3' -H 'Ac
cept-Encoding: gzip, deflate, br, zstd' -H 'Referer: https://webclient.eks.production.netzda-mig.org/' -H 'Origin: https://webclient.eks.production.netzda-mig.org' -H 'DNT: 1'
 -H 'Connection: keep-alive' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H 'Priority: u=4'
```

```
curl 'https://buergerplattform-prod2.production.netzda-mig.org/server/rest/services/Hosted/festnetz_010/FeatureServer/0/query?f=geojson&geometry=%7B%22xmin%22%3A467183.11687
88754%2C%22ymin%22%3A5515695.96105688%2C%22xmax%22%3A469629.1017840004%2C%22ymax%22%3A5518141.945962004%7D&maxRecordCountFactor=3&orderByFields=objectid&outFields=*&outSR=2583
2&quantizationParameters=%7B%22extent%22%3A%7B%22spatialReference%22%3A%7B%22wkid%22%3A25832%7D%2C%22xmin%22%3A467183.1168788754%2C%22ymin%22%3A5515695.96105688%2C%22xmax%22%3
A469629.1017840004%2C%22ymax%22%3A5518141.945962004%7D%2C%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A4.77731426782227%7D&resultType=ti
le&returnCentroid=true&returnExceededLimitFeatures=false&spatialRel=esriSpatialRelIntersects&where=1%3D1&geometryType=esriGeometryEnvelope&inSR=25832' --compressed -H 'User-Ag
ent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:131.0) Gecko/20100101 Firefox/131.0' -H 'Accept: */*' -H 'Accept-Language: de,en-US;q=0.7,en;q=0.3' -H 'Accept-Encoding: 
gzip, deflate, br, zstd' -H 'Referer: https://webclient.eks.production.netzda-mig.org/' -H 'Origin: https://webclient.eks.production.netzda-mig.org' -H 'DNT: 1' -H 'Connection
: keep-alive' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H 'Priority: u=4' -H 'TE: trailers' --output testdata3.geojson
```

Für verschiedene Jahre: 
- `festnetz_001` für 12.2018
- `festnetz_002` für 07.2019
- `festnetz_003` für 12.2019
- ...
- `festnetz_010` für 12.2023

```{r}
# Base request template
base_req <- request("https://buergerplattform-prod2.production.netzda-mig.org") %>%
  req_url_path_append("server/rest/services/Hosted") %>%
  req_headers(
    `User-Agent` = "Mozilla/5.0",
    `Accept` = "*/*",
    `Origin` = "https://webclient.eks.production.netzda-mig.org/",
    `Referer` = "https://webclient.eks.production.netzda-mig.org/"
  ) %>%
  req_url_query(
    f = "geojson",
    maxRecordCountFactor = 3,
    orderByFields = "objectid",
    outFields = "*",
    outSR = 3035,
    resultType = "tile",
    returnCentroid = "true",
    returnExceededLimitFeatures = "false",
    spatialRel = "esriSpatialRelIntersects",
    where = "1=1",
    geometryType = "esriGeometryEnvelope",
    inSR = 3035
  )

dates <- c("010" = "202312", 
  "009" = "202306", 
  "008" = "202212", 
  "007" = "202206", 
  "006" = "202107", 
  "005" = "202012", 
  "004" = "202007", 
  "003" = "201912", 
  "002" = "201907", 
  "001" = "201812")

fetch_api <- function(geometry) {
  # Create requests for all dates
  requests <- names(dates) %>%
    map(\(x) {
      base_req %>%
        req_url_path_append(paste0("festnetz_", x)) %>%
        req_url_path_append("FeatureServer/0/query") %>%
        req_url_query(geometry = toJSON(geometry, auto_unbox = TRUE))
    })
  
  # Perform requests in parallel
  responses <- req_perform_parallel(requests)
  
  # Process responses
  map2_dfr(responses, dates, \(resp, date) {
    content <- resp %>%
      resp_body_json(simplifyVector = TRUE)
    
    if(content$properties$exceededTransferLimit) {
      print("Transfer Limit Exceeded at\n")
      print(geometry)
      return(NULL)
    }
    if(length(content$features) == 0) return(NULL)
    
    data_geom <- content %>%
      pluck("features") %>%
      pluck("centroid") %>% 
      unnest_wider(coordinates, names_sep = "_") %>%
      select(x_mp = coordinates_1, y_mp = coordinates_2)
    
    data_content <- content %>%
      pluck("features") %>%
      pluck("properties") %>%
      select(starts_with("down") & contains("_hh_")) %>%
      mutate(across(everything(), as.numeric))
    
    cbind(data_geom, data_content) %>%
      mutate(date = date, .before = 1) %>%
      as_tibble() %>%
      return()
  })
}
```

```{r}
#| eval: false

hessen_grid_cells <- hessen %>%
  #st_transform(25832) %>%
  st_make_grid(n = c(32, 32), square = TRUE, what = "polygons") %>%
  st_as_sf() %>%
  filter(st_intersects(., hessen, sparse = FALSE)[,1]) %>%
  st_geometry() %>%
  map(~ as.list(st_bbox(.)))

hessen_result_all_years <- map(hessen_grid_cells, fetch_api, .progress = TRUE) %>%
  list_rbind()

arrow::write_parquet(hessen_result_all_years, "hessen_result_all_years.parquet")

hessen_result_all_years %>%
  mutate(date = ym(date)) %>%
  group_by(date) %>%
  summarise(sum_ftthb = sum(down_fn_hh_ftthb_1000, na.rm = TRUE)) %>%
  ggplot(aes(x = date, y = sum_ftthb))+
  geom_line()
```

## Gesamtabfrage
```{r}
# Create grid cells
deutschland_grid_cells <- deutschland %>%
  st_make_grid(n = c(80, 80), square = TRUE, what = "polygons") %>%
  st_as_sf() %>%
  filter(st_intersects(., deutschland, sparse = FALSE)[,1]) %>%
  st_geometry() %>%
  map(~ as.list(st_bbox(.)))

# Process in chunks
chunk_size <- 200
grid_chunks <- split(deutschland_grid_cells, ceiling(seq_along(deutschland_grid_cells)/chunk_size))

# Process each chunk
for(i in seq_along(grid_chunks)) {
  str_glue("{i} von {length(grid_chunks)}") %>% print()
  
  chunk_result <- map(grid_chunks[[i]], fetch_api, .progress = TRUE) %>% list_rbind()
  
  write_parquet(chunk_result, str_glue("./Daten/Breitbandatlas/chunk_{i}.parquet"))
  rm(chunk_result)
  gc()
}

# Combine all chunks
final_result <- list.files(path = "./Daten/Breitbandatlas", pattern = "chunk_.*\\.parquet") %>%
  map(read_parquet) %>%
  list_rbind() %>%
  select(date, x_mp, y_mp, everything())

write_parquet(final_result, "./Daten/Breitbandatlas/deutschland_result_all_years.parquet")
```

