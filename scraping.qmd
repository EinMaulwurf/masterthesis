---
title: "scraping"
format: html
---

```{r}
library(httr)
library(jsonlite)
library(tidyverse)
library(sf)
library(arrow)
#library(geoarrow)
library(sfarrow)
```

```{r}
germany <- giscoR::gisco_get_countries(country = "DE") %>% st_transform(3035)
gemeinden <- giscoR::gisco_get_communes(country = "DE") %>% st_transform(3035)
bundesländer <- giscoR::gisco_get_nuts(country = "DE", nuts_level = 1) %>% st_transform(3035)
hessen <- bundesländer %>% filter(NUTS_NAME == "HESSEN")
```


```
curl 'https://buergerplattform-prod2.production.netzda-mig.org/server/rest/services/Hosted/verwaltungsgebiete_004/FeatureServer/1/query?f=geojson&geometry=%7B%22xmin%22%3A46
9629.1017840004%2C%22ymin%22%3A5537709.825203005%2C%22xmax%22%3A489196.98102500045%2C%22ymax%22%3A5557277.704444005%7D&maxRecordCountFactor=3&orderByFields=objectid&outFields=
*&outSR=25832&quantizationParameters=%7B%22extent%22%3A%7B%22spatialReference%22%3A%7B%22wkid%22%3A25832%7D%2C%22xmin%22%3A469629.1017840004%2C%22ymin%22%3A5537709.825203005%2
C%22xmax%22%3A489196.98102500045%2C%22ymax%22%3A5557277.704444005%7D%2C%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A38.21851414257816%7
D&resultType=tile&returnCentroid=true&returnExceededLimitFeatures=false&spatialRel=esriSpatialRelIntersects&where=1%3D1&geometryType=esriGeometryEnvelope&inSR=25832' --compres
sed -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:131.0) Gecko/20100101 Firefox/131.0' -H 'Accept: */*' -H 'Accept-Language: de,en-US;q=0.7,en;q=0.3' -H 'Ac
cept-Encoding: gzip, deflate, br, zstd' -H 'Referer: https://webclient.eks.production.netzda-mig.org/' -H 'Origin: https://webclient.eks.production.netzda-mig.org' -H 'DNT: 1'
 -H 'Connection: keep-alive' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H 'Priority: u=4'
```

```
curl 'https://buergerplattform-prod2.production.netzda-mig.org/server/rest/services/Hosted/festnetz_010/FeatureServer/0/query?f=geojson&geometry=%7B%22xmin%22%3A467183.11687
88754%2C%22ymin%22%3A5515695.96105688%2C%22xmax%22%3A469629.1017840004%2C%22ymax%22%3A5518141.945962004%7D&maxRecordCountFactor=3&orderByFields=objectid&outFields=*&outSR=2583
2&quantizationParameters=%7B%22extent%22%3A%7B%22spatialReference%22%3A%7B%22wkid%22%3A25832%7D%2C%22xmin%22%3A467183.1168788754%2C%22ymin%22%3A5515695.96105688%2C%22xmax%22%3
A469629.1017840004%2C%22ymax%22%3A5518141.945962004%7D%2C%22mode%22%3A%22view%22%2C%22originPosition%22%3A%22upperLeft%22%2C%22tolerance%22%3A4.77731426782227%7D&resultType=ti
le&returnCentroid=true&returnExceededLimitFeatures=false&spatialRel=esriSpatialRelIntersects&where=1%3D1&geometryType=esriGeometryEnvelope&inSR=25832' --compressed -H 'User-Ag
ent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:131.0) Gecko/20100101 Firefox/131.0' -H 'Accept: */*' -H 'Accept-Language: de,en-US;q=0.7,en;q=0.3' -H 'Accept-Encoding: 
gzip, deflate, br, zstd' -H 'Referer: https://webclient.eks.production.netzda-mig.org/' -H 'Origin: https://webclient.eks.production.netzda-mig.org' -H 'DNT: 1' -H 'Connection
: keep-alive' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H 'Priority: u=4' -H 'TE: trailers' --output testdata3.geojson
```

Für verschiedene Jahre: 
- `festnetz_001` für 12.2018
- `festnetz_002` für 07.2019
- `festnetz_003` für 12.2019
- ...
- `festnetz_010` für 12.2023

```{r}
# Construct the query parameters
query_params <- list(
  f = "geojson",
  maxRecordCountFactor = 3,
  orderByFields = "objectid",
  outFields = "*",
  outSR = 3035,
  resultType = "tile",
  returnCentroid = "true",
  returnExceededLimitFeatures = "false",
  spatialRel = "esriSpatialRelIntersects",
  where = "1=1",
  geometryType = "esriGeometryEnvelope",
  inSR = 3035
)

custom_headers = add_headers(
  `User-Agent` = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:131.0) Gecko/20100101 Firefox/131.0",
  `Accept` = "*/*",
  `Accept-Language` = "de,en-US;q=0.7,en;q=0.3",
  `Accept-Encoding` = "gzip, deflate, br, zstd",
  `Referer` = "https://webclient.eks.production.netzda-mig.org/",
  `Origin` = "https://webclient.eks.production.netzda-mig.org/",
  `DNT` = "1",
  `Connection` = "keep-alive",
  `Sec-Fetch-Dest` = "empty",
  `Sec-Fetch-Mode` = "cors",
  `Sec-Fetch-Site` = "same-site",
  `Priority` = "u=4",
  `TE` = "trailers"
)

# Lookup for year
dates <- c("010" = "202312", 
  "009" = "202306", 
  "008" = "202212", 
  "007" = "202206", 
  "006" = "202107", 
  "005" = "202012", 
  "004" = "202007", 
  "003" = "201912", 
  "002" = "201907", 
  "001" = "201812")

fetch_api <- function(geometry, date = "202312") {
  # Base URL
  base_url = "https://buergerplattform-prod2.production.netzda-mig.org/server/rest/services/Hosted/festnetz_010/FeatureServer/0/query"
  
  # Convert geometry list to JSON string
  geometry_json <- toJSON(geometry, auto_unbox = TRUE)
  query_params$geometry <- geometry_json
  
  # Make the GET request
  response <- GET(
    url = base_url,
    query = query_params,
    custom_headers
  )
  
  # Check for successful request
  if (http_error(response)) {
    stop("Request failed with status: ", status_code(response), " - ", http_status(response)$message)
  }
  
  # Parse the response content as text
  content_text <- content(response, as = "text", encoding = "UTF-8") %>%
    fromJSON()
  
  if(content_text$properties$exceededTransferLimit) {
    stop("Transfer Limit Exceeded")
  }
  
  if(length(content_text$features) == 0 | nrow(content_text$features) %>% is.null()) return(NULL)
  
  data_content <- content_text$features$properties %>%
    select(id, gem, starts_with("down")) %>%
    mutate(across(starts_with("down"), as.numeric))

  data_geom <- content_text$features$centroid %>% 
    unnest_wider(coordinates, names_sep = "_") %>%
    select(x_mp = coordinates_1, y_mp = coordinates_2)
  
  data_api <- cbind(data_geom, data_content)
  
  #return(list(sf_data, content_text))
  return(data_api)
}
```

```{r}
hessen_grid_cells <- hessen %>%
  #st_transform(25832) %>%
  st_make_grid(n = c(32, 32), square = TRUE, what = "polygons") %>%
  st_as_sf() %>%
  filter(st_intersects(., hessen, sparse = FALSE)[,1])

# hessen_grid_cells %>%
#   ggplot()+
#   geom_sf()+
#   geom_sf(data = germany, fill = NA)

hessen_grid_cells <- germany_grid_cells %>%
  st_geometry() %>%
  map(~ as.list(st_bbox(.)))

#grid_cells_sample <- grid_cells[1:100]

hessen_result <- map(hessen_grid_cells, fetch_api, .progress = TRUE) %>%
  list_rbind()
```

```{r}
ggplot()+
  geom_sf(data = hessen_result %>%
            drop_na(down_fn_gew_ftthb_1000) %>%
            st_as_sf(coords = c("x_mp", "y_mp"), 
                     crs = 3035), 
          aes(color = down_fn_gew_ftthb_1000),
          size = .2)+
  geom_sf(data = hessen, fill = NA)

hessen_result %>%
            drop_na(down_fn_gew_ftthb_1000) %>%
            st_as_sf(coords = c("x_mp", "y_mp"), 
                     crs = 3035)
```
